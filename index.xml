<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>聽的资料</title>
        <link>https://sohunjug.com/</link>
        <description>Recent content on 聽的资料</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 28 May 2019 00:00:00 +0800</lastBuildDate><atom:link href="https://sohunjug.com/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>归档</title>
        <link>https://sohunjug.com/archives/</link>
        <pubDate>Tue, 28 May 2019 00:00:00 +0800</pubDate>
        
        <guid>https://sohunjug.com/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>TypeScript: (Node.JS &#43; gulp &#43; express) 写RESTful API 做后端</title>
        <link>https://sohunjug.com/2016/09/13/typescript-node.js--gulp--express-%E5%86%99restful-api-%E5%81%9A%E5%90%8E%E7%AB%AF/</link>
        <pubDate>Tue, 13 Sep 2016 15:58:43 +0800</pubDate>
        
        <guid>https://sohunjug.com/2016/09/13/typescript-node.js--gulp--express-%E5%86%99restful-api-%E5%81%9A%E5%90%8E%E7%AB%AF/</guid>
        <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;最近应公司项目要求，入坑Ionic，查了很多资料之后感觉还是使用TypeScript来写比较好，因本人本身的C++功底，TypeScript正好是类似面向对象形式的，这样接受新语言环境也比较快。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;typescript简介&#34;&gt;TypeScript简介&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;资料显示，TypeScript之父与C#之父是同一人，所以用法与面向对象应该有相似之处，不过本人对C#不熟，此不做评论。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;TypeScript类似C++，需要编译为js来执行，也依然可以打断点来调试ts文件。而且TypeScript还有语法检查、变量类型等配置，实在是能提高js的安全性，因此我选择TypeScript来作为主语言。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;环境搭建&#34;&gt;环境搭建&lt;/h2&gt;
&lt;h3 id=&#34;初始化项目&#34;&gt;初始化项目&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;既然最终是编译成js，环境就是Node.JS了。配置好node与npm后创建一个Project目录:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir localtest
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cd localtest
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm init
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;初始化项目会生成package.json文件，此文件为项目依赖库的跟踪文件，当你将项目分享给其他人时，无需全部分享，只需分享项目代码与此文件，对方即可使用npm install来自己创建项目依赖环境&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;package.json 样例:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat package.json
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;name&amp;#34;: &amp;#34;localtest&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;version&amp;#34;: &amp;#34;1.0.0&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;description&amp;#34;: &amp;#34;This is a test.&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;main&amp;#34;: &amp;#34;index.js&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;dependencies&amp;#34;: {},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;devDependencies&amp;#34;: {},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;scripts&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;test&amp;#34;: &amp;#34;echo \&amp;#34;Error: no test specified\&amp;#34; &amp;amp;&amp;amp; exit 1&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  },
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;author&amp;#34;: &amp;#34;sohunjug&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;license&amp;#34;: &amp;#34;ISC&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;依赖库安装&#34;&gt;依赖库安装&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;下一步开始安装typescript、express、gulp等依赖库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm install -g typescript
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm install -g typings
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm install -g tslint
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;国内可能npm速度不是很给力，可以使用阿里出品的cnpm:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm install -g cnpm --registry=https://registry.npm.taobao.org
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;之后上边的安装就可以使用新的cnpm，速度提升很大哦:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install -g typescript
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install -g typings
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install -g tslint
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;这些常用的可以安装为全局及使用-g，也可以在项目中安装取消-g，加上&amp;ndash;save&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install --save typescript
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install --save typings
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install --save tslint
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;下面开始安装express等依赖库:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install --save express
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install --save body-parser
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install --save jade
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install --save cookie-parser
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install --save morgan
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install --save gulp
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install --save gulp-tsc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install --save run-sequence
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install --save gulp-util
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install --save gulp-clean
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install --save tiny-lr
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install --save gulp-live-server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install --save gulp-tslint
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cnpm install --save debug
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;此时package.json变为:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat package.json
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;name&amp;#34;: &amp;#34;localtest&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;version&amp;#34;: &amp;#34;1.0.0&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;description&amp;#34;: &amp;#34;This is a test.&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;main&amp;#34;: &amp;#34;index.js&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;dependencies&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;body-parser&amp;#34;: &amp;#34;^1.15.2&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;cookie-parser&amp;#34;: &amp;#34;^1.4.3&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;debug&amp;#34;: &amp;#34;^2.2.0&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;express&amp;#34;: &amp;#34;^4.14.0&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;gulp&amp;#34;: &amp;#34;^3.9.1&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;gulp-clean&amp;#34;: &amp;#34;^0.3.2&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;gulp-live-server&amp;#34;: &amp;#34;^0.0.30&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;gulp-tsc&amp;#34;: &amp;#34;^1.2.3&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;gulp-tslint&amp;#34;: &amp;#34;^6.1.1&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;gulp-util&amp;#34;: &amp;#34;^3.0.7&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;jade&amp;#34;: &amp;#34;^1.11.0&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;morgan&amp;#34;: &amp;#34;^1.7.0&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;run-sequence&amp;#34;: &amp;#34;^1.2.2&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;tiny-lr&amp;#34;: &amp;#34;^0.2.1&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  },
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;devDependencies&amp;#34;: {},
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;scripts&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;#34;test&amp;#34;: &amp;#34;echo \&amp;#34;Error: no test specified\&amp;#34; &amp;amp;&amp;amp; exit 1&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  },
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;author&amp;#34;: &amp;#34;sohunjug&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;#34;license&amp;#34;: &amp;#34;ISC&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;typescript中依赖安装&#34;&gt;TypeScript中依赖安装&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;本人使用typings，据网上资料显示，tsd已经过时了，所以也木有研究，此处不做评论。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;此处typings，我是使用-g安装的全局:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;typings install --global --save dt~express
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;typings install --global --save dt~node 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;typings install --global --save dt~serve-static 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;typings install --global --save dt~express-serve-static-core 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;typings install --global --save dt~mime 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;typings install --global --save dt~body-parser 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;typings install --global --save dt~debug 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;typings install --global --save dt~cookie-parser 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;typings install --global --save dt~morgan
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;使用&amp;ndash;save安装本地则使用:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;node_modules/.bin/typings install --global --save dt~express
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;node_modules/.bin/typings install --global --save dt~node 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;node_modules/.bin/typings install --global --save dt~serve-static 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;node_modules/.bin/typings install --global --save dt~express-serve-static-core 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;node_modules/.bin/typings install --global --save dt~mime 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;node_modules/.bin/typings install --global --save dt~body-parser 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;node_modules/.bin/typings install --global --save dt~debug 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;node_modules/.bin/typings install --global --save dt~cookie-parser 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;node_modules/.bin/typings install --global --save dt~morgan
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;gulp配置&#34;&gt;gulp配置&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;同样看到网上评论，grunt为基于json配置来管理自动化部署，而gulp基于代码形式，更倾向于程序员使用，而且可以自己制作部署细节。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;基于网上找到的配置，使用了一下发现对于express的app形式的热更新不支持，所以又找了些资料，终于自己配置出来了，现分享下:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;var gulp = require(&amp;#39;gulp&amp;#39;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;var tsc = require(&amp;#39;gulp-tsc&amp;#39;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;var seq = require(&amp;#39;run-sequence&amp;#39;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;var del = require(&amp;#39;gulp-clean&amp;#39;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;var gls = require(&amp;#39;gulp-live-server&amp;#39;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;var chalk = require(&amp;#39;chalk&amp;#39;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;var gutil = require(&amp;#39;gulp-util&amp;#39;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;var tslint = require(&amp;#39;gulp-tslint&amp;#39;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;var paths = {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ts: {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        src: [
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &amp;#39;app/**/*.ts&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ],
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        dest: &amp;#39;build&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gulp.task(&amp;#39;serve&amp;#39;, () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    seq(&amp;#39;clean&amp;#39;, &amp;#39;build&amp;#39;, &amp;#39;watch&amp;#39;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gulp.task(&amp;#39;watch&amp;#39;, () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    var server = gls.new(&amp;#39;build/www.js&amp;#39;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    server.start();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    gulp.watch([&amp;#39;app/**/*.ts&amp;#39;], () =&amp;gt; seq(&amp;#39;tslint&amp;#39;, &amp;#39;clean&amp;#39;, &amp;#39;build&amp;#39;));
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    gulp.watch([&amp;#39;build/**/*.js&amp;#39;, &amp;#39;build/**/*.css&amp;#39;, &amp;#39;build/**/*.html&amp;#39;], file =&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      server.notify.apply(server, [file])
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    );
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    gulp.watch(&amp;#39;build/www.js&amp;#39;, () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      setTimeout(() =&amp;gt; gutil.log(&amp;#39;Restart Succeed!&amp;#39;), 500);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      server.start.bind(server)()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gulp.task(&amp;#39;build&amp;#39;, () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return gulp.src(paths.ts.src)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        .pipe(tslint({
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            formatter: &amp;#34;verbose&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        .pipe(tsc({
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            module: &amp;#34;CommonJS&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            sourcemap: true,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            emitError: false
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        .pipe(gulp.dest(paths.ts.dest));
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gulp.task(&amp;#39;clean&amp;#39;, () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    del(paths.ts.dest);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gulp.task(&amp;#39;rebuild&amp;#39;, file =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    seq(&amp;#39;clean&amp;#39;, &amp;#39;build&amp;#39;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gulp.task(&amp;#34;tslint&amp;#34;, () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return gulp.src(paths.ts.src)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        .pipe(tslint({
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            formatter: &amp;#34;verbose&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        .pipe(tslint.report());
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gulp.task(&amp;#39;default&amp;#39;, [&amp;#39;rebuild&amp;#39;]);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;此配置可以在当前目录中使用gulp来启动了，默认gulp执行default任务(即重新编译)，还可以手动自己执行不同的task任务，其中gulp serve是自动热更新部署。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;效果为：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ gulp serve
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[15:27:30] Using gulpfile xxxx/localtest/gulpfile.js
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[15:27:30] Starting &amp;#39;serve&amp;#39;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[15:27:30] Starting &amp;#39;clean&amp;#39;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[15:27:30] Finished &amp;#39;clean&amp;#39; after 1.36 ms
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[15:27:30] Starting &amp;#39;build&amp;#39;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[15:27:30] Finished &amp;#39;serve&amp;#39; after 15 ms
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[15:27:30] Compiling TypeScript files using tsc version 1.8.10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[15:27:32] Finished &amp;#39;build&amp;#39; after 2.6 s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[15:27:32] Starting &amp;#39;watch&amp;#39;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[15:27:32] Finished &amp;#39;watch&amp;#39; after 57 ms
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;livereload[tiny-lr] listening on 35729 ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[15:27:38] Starting &amp;#39;tslint&amp;#39;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[15:27:38] Finished &amp;#39;tslint&amp;#39; after 213 ms
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[15:27:38] Starting &amp;#39;clean&amp;#39;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[15:27:38] Finished &amp;#39;clean&amp;#39; after 266 μs
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[15:27:38] Starting &amp;#39;build&amp;#39;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[15:27:38] Compiling TypeScript files using tsc version 1.8.10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[15:27:40] Finished &amp;#39;build&amp;#39; after 2.39 s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[15:27:41] Restart Succeed!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;项目样例代码已更新GitHub(&lt;a class=&#34;link&#34; href=&#34;https://github.com/sohunjug/TypeScript-RESTful-sample.git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TypeScript-RESTful-sample&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;代码中RESTFul样例我开发了一个简单的路由小框架。欢迎star。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;参考链接：
&lt;a class=&#34;link&#34; href=&#34;http://brianflove.com/2016/03/29/typescript-express-node-js/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://brianflove.com/2016/03/29/typescript-express-node-js/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.npmjs.com/package/gulp-live-server&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.npmjs.com/package/gulp-live-server&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>PacketSender 发送接收socket macOS App</title>
        <link>https://sohunjug.com/2016/08/18/packetsender-%E5%8F%91%E9%80%81%E6%8E%A5%E6%94%B6socket-macos-app/</link>
        <pubDate>Thu, 18 Aug 2016 22:33:12 +0800</pubDate>
        
        <guid>https://sohunjug.com/2016/08/18/packetsender-%E5%8F%91%E9%80%81%E6%8E%A5%E6%94%B6socket-macos-app/</guid>
        <description>&lt;h4 id=&#34;更新&#34;&gt;更新&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;问题原因可能为 macOS 10.12 beta 系统问题，新更新为 10.12 beta 6 问题解决。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;目前版本已更新为 1.4.3，支持多窗口。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;起因&#34;&gt;起因&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;最近工作发现有时候需要测试发送 TCP 包，而目前 Mac 上又没有找到功能很好的软件，所以就自己开发了一个简单而实用的工具。&lt;a class=&#34;link&#34; href=&#34;https://itunes.apple.com/us/app/packetsender/id906185173?l=zh&amp;amp;ls=1&amp;amp;mt=12&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PacketSender&lt;/a&gt;
因后来实用 ObjC 重写了的原因，所以开源旧版本的 Swift 版本吧。&lt;a class=&#34;link&#34; href=&#34;https://gitlab.com/sohunjug/PacketSender-Swift.git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitLab&lt;/a&gt;、&lt;a class=&#34;link&#34; href=&#34;https://github.com/sohunjug/PacketSender-Swift.git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;所使用库&#34;&gt;所使用库&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;两个版本都使用的&lt;a class=&#34;link&#34; href=&#34;https://github.com/robbiehanson/CocoaAsyncSocket&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CocoaAsyncSocket&lt;/a&gt;开源库来实现 socket 连接。
在 objc 或 swift 中，主界面是在主线程中执行，所以相关 socket 操作等，尽量需要效率且非阻塞，让等待函数在后台线程执行，这个库正好满足。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;版本&#34;&gt;版本&lt;/h2&gt;
&lt;h3 id=&#34;version-10&#34;&gt;Version 1.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;满足单一发送功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://qn.sohunjug.com/289304.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;1.0&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;version-12&#34;&gt;Version 1.2&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;增加了发送历史记录功能&lt;/li&gt;
&lt;li&gt;增加了消息背景&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://qn.sohunjug.com/684062.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;1.2.1&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://qn.sohunjug.com/802423.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;1.2.2&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;version-13&#34;&gt;Version 1.3&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;增加了行数&lt;/li&gt;
&lt;li&gt;修改了 Server 状态显示&lt;/li&gt;
&lt;li&gt;增加了发收包数量复制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://qn.sohunjug.com/289304.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;1.3&#34;
	
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在此版本之前，一直未发现之前版本在 Mac OS X 10.11.6 版本，根本无法使用，NSTextView 无法选中，无法输入，也无法显示。
期初我以为是 Swift 在 macOS 10.12 beta 4 版本使用 Xcode 7.3.1 编译，造成不兼容问题，所以使用了 ObjC 重写了 Version 1.2.2。
但是结果显示问题依旧。虽然现在更新了 1.3 版本。但是此版本是使用朋友的机器，在 Mac OS X 10.11.6 环境下编译。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;待解决问题&#34;&gt;待解决问题&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;希望以后如果有某位朋友找到解决办法，能沟通下，谢谢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;p&gt;欢迎关于 macOS 开发的朋友，来跟我一起交流技术。&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>自动登录ssh或telnet脚本</title>
        <link>https://sohunjug.com/2016/08/08/%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95ssh%E6%88%96telnet%E8%84%9A%E6%9C%AC/</link>
        <pubDate>Mon, 08 Aug 2016 17:31:53 +0800</pubDate>
        
        <guid>https://sohunjug.com/2016/08/08/%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95ssh%E6%88%96telnet%E8%84%9A%E6%9C%AC/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;闲来无事，正好更新下以前写的脚本，自动登录ssh或telnet。
而且也方便记录密码。&lt;a class=&#34;link&#34; href=&#34;http://git.oschina.net/sohunjug/connect.sh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git-oschina&lt;/a&gt;、&lt;a class=&#34;link&#34; href=&#34;https://github.com/sohunjug/connect.sh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;使用connectsh自动连接ssh或者telnet&#34;&gt;使用connect.sh自动连接ssh或者telnet&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;其中配置文件conn.profile为json格式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;配置样例&#34;&gt;配置样例：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &amp;#34;test1&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &amp;#34;host&amp;#34;: &amp;#34;192.168.0.1&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &amp;#34;port&amp;#34;: 22,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &amp;#34;user&amp;#34;: &amp;#34;root&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &amp;#34;pass&amp;#34;: &amp;#34;123456&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &amp;#34;connecttype&amp;#34;: &amp;#34;ssh&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &amp;#34;sshtype&amp;#34;: &amp;#34;pass&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &amp;#34;language&amp;#34;: &amp;#34;None&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   },
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &amp;#34;test2&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &amp;#34;host&amp;#34;: &amp;#34;192.168.0.1&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &amp;#34;port&amp;#34;: 22,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &amp;#34;user&amp;#34;: &amp;#34;root&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &amp;#34;pass&amp;#34;: &amp;#34;123456&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &amp;#34;connecttype&amp;#34;: &amp;#34;ssh&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &amp;#34;sshtype&amp;#34;: &amp;#34;~/.ssh/test_rsa&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &amp;#34;language&amp;#34;: &amp;#34;en_US.UTF-8&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   },
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &amp;#34;test3&amp;#34;: {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &amp;#34;host&amp;#34;: &amp;#34;192.168.0.1&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &amp;#34;port&amp;#34;: 23,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &amp;#34;user&amp;#34;: &amp;#34;root&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &amp;#34;pass&amp;#34;: &amp;#34;123456&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &amp;#34;connecttype&amp;#34;: &amp;#34;telnet&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &amp;#34;language&amp;#34;: &amp;#34;en_US.UTF-8&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;可以自定义设置别名&#34;&gt;可以自定义设置别名&lt;/h3&gt;
&lt;p&gt;echo &amp;lsquo;aliases=&amp;quot;$HOME/Documents/ssh/connect.sh&amp;quot;&amp;rsquo; &amp;raquo; ~/.bashrc&lt;/p&gt;
&lt;h3 id=&#34;之后执行&#34;&gt;之后执行&lt;/h3&gt;
&lt;p&gt;connect show test1&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/test1/host							192.168.0.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/test1/port							22
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/test1/user							root
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/test1/pass							123456
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/test1/connecttype			ssh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/test1/sshtype					pass
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/test1/language					en_US.UTF-8
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;connect test1&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Last login: Mon Aug  8 23:48:46 2016 from gateway
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[root@clusterA31 ~]#
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;附带脚本文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;  1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 79
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 80
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 81
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 82
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 83
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 84
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 85
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 86
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 87
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 88
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 89
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 90
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 91
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 92
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 93
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 94
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 95
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 96
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 97
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 98
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 99
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;100
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;101
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;102
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;103
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;104
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;105
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;106
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;107
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;108
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;109
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;110
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;111
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;112
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;113
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;114
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;115
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;116
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;117
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$CONNJSON&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;_BJSON&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/Documents/ssh/json.sh &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;_BJSON&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$CONNJSON&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$CONNCFG&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;_C_CFG&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/Documents/ssh/conn.profile &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;_C_CFG&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$CONNCFG&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ! -f &lt;span class=&#34;nv&#34;&gt;$_C_CFG&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;not fount profile file &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_C_CFG&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_BJSON&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; connect&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;json &amp;lt; &lt;span class=&#34;nv&#34;&gt;$_C_CFG&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;json &amp;lt; &lt;span class=&#34;nv&#34;&gt;$_C_CFG&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; wc -l&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$row&lt;/span&gt; -gt &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;fount to many configs\n&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$config&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;connhost&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;json &amp;lt; &lt;span class=&#34;nv&#34;&gt;$_C_CFG&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v grep &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print \$3}&amp;#39;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;nv&#34;&gt;$connhost&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; error:  没有那个IP
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;connport&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;json &amp;lt; &lt;span class=&#34;nv&#34;&gt;$_C_CFG&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v grep &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print \$3}&amp;#39;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;connuser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;json &amp;lt; &lt;span class=&#34;nv&#34;&gt;$_C_CFG&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v grep &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print \$3}&amp;#39;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;connpass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;json &amp;lt; &lt;span class=&#34;nv&#34;&gt;$_C_CFG&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;pass&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v grep &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print \$3}&amp;#39;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;connlang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;json &amp;lt; &lt;span class=&#34;nv&#34;&gt;$_C_CFG&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;lang&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v grep &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print \$3}&amp;#39;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;conntype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;json &amp;lt; &lt;span class=&#34;nv&#34;&gt;$_C_CFG&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;conn&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v grep &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print \$3}&amp;#39;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;conntssh&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;json &amp;lt; &lt;span class=&#34;nv&#34;&gt;$_C_CFG&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;nv&#34;&gt;$name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;ssht&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v grep &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print \$3}&amp;#39;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$connport&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;connport&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$connuser&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;connuser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$connpass&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;connpass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$connlang&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;connlang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;None&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$conntype&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;conntype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ssh&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$conntssh&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;conntssh&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pass&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$connlang&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; !&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;None&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;locallang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$LANG&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;locallcall&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$LC_ALL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;LANG&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$connlang&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;LC_ALL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$connlang&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$conntype&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ssh&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;connstr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spawn ssh -p&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;connport&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;connuser&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;connhost&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                 expect {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                        \&amp;#34;*(yes/no)*\&amp;#34; { send \&amp;#34;yes\n\&amp;#34;; exp_continue }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                    -re \&amp;#34;assword:|assw\&amp;#34; { send \&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;connpass&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\n\&amp;#34; }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                 }&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$conntssh&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; !&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;pass&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nv&#34;&gt;connstr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spawn ssh -p&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;connport&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;connuser&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;connhost&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; -i&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;conntssh&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                     expect {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                            \&amp;#34;*(yes/no)*\&amp;#34; { send \&amp;#34;yes\n\&amp;#34; }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                        -re \&amp;#34;&amp;gt;|]|&lt;/span&gt;$&lt;span class=&#34;s2&#34;&gt;|#\&amp;#34; { send \&amp;#34;\n\&amp;#34; }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                     }&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        expect -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                set timeout 10000
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                stty -echo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;connstr&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                if { \&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;connlang&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\&amp;#34; != \&amp;#34;None\&amp;#34; } {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                    expect {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                        -re \&amp;#34;&amp;gt;|]|&lt;/span&gt;$&lt;span class=&#34;s2&#34;&gt;|#\&amp;#34; { send \&amp;#34;export LANG=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;connlang&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &amp;amp;&amp;amp; export LC_ALL=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;connlang&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\n\&amp;#34; }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                interact 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                  &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$conntype&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;telnet&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$connlang&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        expect -c &lt;span class=&#34;s2&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                set timeout 10000
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                stty -echo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                spawn telnet &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;connhost&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;connport&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                expect {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                        \&amp;#34;*(yes/no)*\&amp;#34; { send \&amp;#34;yes\n\&amp;#34;; exp_continue }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                        \&amp;#34;*ogin*\&amp;#34; { send \&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;connuser&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\n\&amp;#34;; exp_continue }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                    -re \&amp;#34;assword:|assw\&amp;#34; { send \&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;connpass&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\n\&amp;#34; }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                if { \&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;connlang&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\&amp;#34; != \&amp;#34;None\&amp;#34; } {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                    expect {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                        -re \&amp;#34;&amp;gt;|]|&lt;/span&gt;$&lt;span class=&#34;s2&#34;&gt;|#\&amp;#34; { send \&amp;#34;export LANG=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;connlang&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &amp;amp;&amp;amp; export LC_ALL=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;connlang&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;\n\&amp;#34; }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                interact 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;                  &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$connlang&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; !&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;None&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;locallang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$LANG&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;locallcall&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$LC_ALL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;LANG&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$locallang&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;LC_ALL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$locallcall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; showconn&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    json &amp;lt; &lt;span class=&#34;nv&#34;&gt;$_C_CFG&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{printf(&amp;#34;%-25s\t%s\n&amp;#34;, $1, $3)}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; in 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    show&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        showconn &lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; onename\n&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; show onename&amp;#34;&lt;/span&gt; &amp;gt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    *&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        connect &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>Kafka、RocketMQ调研</title>
        <link>https://sohunjug.com/2016/08/08/kafkarocketmq%E8%B0%83%E7%A0%94/</link>
        <pubDate>Mon, 08 Aug 2016 09:10:28 +0800</pubDate>
        
        <guid>https://sohunjug.com/2016/08/08/kafkarocketmq%E8%B0%83%E7%A0%94/</guid>
        <description>&lt;h3 id=&#34;kafka是linkin开源的消息中间件&#34;&gt;Kafka是Linkin开源的消息中间件&lt;/h3&gt;
&lt;h4 id=&#34;kafka的设计目标是&#34;&gt;Kafka的设计目标是：&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;（1）以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上数据也能保证常数时间复杂度的访问性能。
（2）高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒100K条以上消息的传输。
（3）支持Kafka Server间的消息分区，及分布式消费，同时保证每个Partition内的消息顺序传输。
（4）同时支持离线数据处理和实时数据处理。
（5）Scale out：支持在线水平扩展。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;rocketmq是阿里开源的消息中间件&#34;&gt;RocketMQ是阿里开源的消息中间件&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;其最初也是基于Kafka发展而来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;数据可靠性&#34;&gt;数据可靠性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RocketMQ支持异步实时刷盘，同步刷盘，同步Replication，异步Replication&lt;/li&gt;
&lt;li&gt;Kafka使用异步刷盘方式，异步Replication/同步Replication&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;性能对比&#34;&gt;性能对比&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kafka会在Producer端将多个小消息合并，批量发向Broker，所以在批量发送消息时有着大量的优势，在批量时，Kafka单机写入TPS约在百万条/秒，消息大小100个字节&lt;/li&gt;
&lt;li&gt;RocketMQ单机写入TPS单实例约7万条/秒，RocketMQ在阿里使用在淘宝支付宝端，在处理异步消息需要保证消息到达，所以未实现api级别批量发送消息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;单机支持的队列数&#34;&gt;单机支持的队列数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kafka单机超过64个队列/分区，Load会发生明显的飙高现象，队列越多，load越高，发送消息响应时间变长。&lt;/li&gt;
&lt;li&gt;RocketMQ单机支持最高5万个队列，Load不会发生明显变化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;严格的消息顺序&#34;&gt;严格的消息顺序&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kafka支持消息顺序，但是一台Broker宕机后，就会产生消息乱序&lt;/li&gt;
&lt;li&gt;RocketMQ支持严格的消息顺序，在顺序消息场景下，一台Broker宕机后，发送消息会失败，但是不会乱序&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分布式事务消息&#34;&gt;分布式事务消息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kafka不支持分布式事务消息&lt;/li&gt;
&lt;li&gt;阿里云MQ支持分布式事务消息，未来开源版本的RocketMQ也有计划支持分布式事务消息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;消息查询&#34;&gt;消息查询&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kafka不支持消息查询&lt;/li&gt;
&lt;li&gt;RocketMQ支持根据Message Id查询消息，也支持根据消息内容查询消息（发送消息时指定一个Message Key，任意字符串，例如指定为订单Id）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：消息查询对于定位消息丢失问题非常有帮助，例如某个订单处理失败，是消息没收到还是收到处理出错了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;消息回溯&#34;&gt;消息回溯&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kafka理论上可以按照Offset来回溯消息&lt;/li&gt;
&lt;li&gt;RocketMQ支持按照时间来回溯消息，精度毫秒，例如从一天之前的某时某分某秒开始重新消费消息&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：典型业务场景如consumer做订单分析，但是由于程序逻辑或者依赖的系统发生故障等原因，导致今天消费的消息全部无效，需要重新从昨天零点开始消费，那么以时间为起点的消息重放功能对于业务非常有帮助。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;消费并行度&#34;&gt;消费并行度&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kafka的消费并行度依赖Topic配置的分区数，如分区数为10，那么最多10台机器来并行消费（每台机器只能开启一个线程），或者一台机器消费（10个线程并行消费）。即消费并行度和分区数一致。&lt;/li&gt;
&lt;li&gt;RocketMQ消费并行度分两种情况
&lt;ul&gt;
&lt;li&gt;顺序消费方式并行度同Kafka完全一致&lt;/li&gt;
&lt;li&gt;乱序方式并行度取决于Consumer的线程数，如Topic配置10个队列，10台机器消费，每台机器100个线程，那么并行度为1000。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;broker端消息过滤&#34;&gt;Broker端消息过滤&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kafka不支持Broker端的消息过滤&lt;/li&gt;
&lt;li&gt;RocketMQ支持两种Broker端消息过滤方式
&lt;ul&gt;
&lt;li&gt;根据Message Tag来过滤，相当于子topic概念&lt;/li&gt;
&lt;li&gt;向服务器上传一段Java代码，可以对消息做任意形式的过滤，甚至可以做Message Body的过滤拆分。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;单机系统可靠性&#34;&gt;单机系统可靠性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;模拟进程退出&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在消息收发过程中，利用Kill -9 命令使Broker进程终止，然后重新启动，得到可靠性数据如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;产品&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;刷盘策略&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;并发&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;tps&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;丢失&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;重复&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Kafka&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;异步&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;600&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不丢&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不重复&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Kafka&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;异步&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;30&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10500&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不丢&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不重复&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Kafka&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;异步&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;150&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;49200&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不丢&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;重复7条&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;RocketMQ&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;异步&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4066&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不丢&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不重复&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;RocketMQ&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;异步&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10900&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不丢&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不重复&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;RocketMQ&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;异步&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;140&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;52428&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不丢&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不重复&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;在Broker进程被终止重启，Kafka和RMQ都能保证同步发送的消息不丢，因为进程退出后操作系统能确保将该进程遗留在内存的数据刷到磁盘上。实验中，Kafka出现了极少量的消息重复。再次可以确定此场景中，二者的可靠性都很高。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;模拟机器掉电&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在消息收发过程中，直接拔掉Broker所在的宿主机电源，然后重启宿主机和Broker应用。因受到机房断电限制，我们在本场景测试中使用的是普通PC机器。得到可靠性数据如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;产品&lt;/th&gt;
&lt;th&gt;刷盘策略&lt;/th&gt;
&lt;th&gt;并发&lt;/th&gt;
&lt;th&gt;tps&lt;/th&gt;
&lt;th&gt;丢失&lt;/th&gt;
&lt;th&gt;重复&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Kafka&lt;/td&gt;
&lt;td&gt;异步&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;丢失3条&lt;/td&gt;
&lt;td&gt;掉电前所有发送重新消费&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kafka&lt;/td&gt;
&lt;td&gt;同步&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;不丢&lt;/td&gt;
&lt;td&gt;重复3条&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kafka&lt;/td&gt;
&lt;td&gt;同步&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;不丢&lt;/td&gt;
&lt;td&gt;重复2w条&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RocketMQ&lt;/td&gt;
&lt;td&gt;异步&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;2500&lt;/td&gt;
&lt;td&gt;丢失19条&lt;/td&gt;
&lt;td&gt;不重复&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RocketMQ&lt;/td&gt;
&lt;td&gt;同步&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;不丢&lt;/td&gt;
&lt;td&gt;掉电前所有发送重新消费&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RocketMQ&lt;/td&gt;
&lt;td&gt;同步&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;4000&lt;/td&gt;
&lt;td&gt;不丢&lt;/td&gt;
&lt;td&gt;掉电前所有发送重新消费&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;###测试结论&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在Broker进程被Kill的场景， Kafka和RocketMQ都能在保证吞吐量的情况下，不丢消息，可靠性都比较高。&lt;/li&gt;
&lt;li&gt;在宿主机掉电的场景，Kafka与RocketMQ均能做到不丢消息，此时Kafka的吞吐量会急剧下跌，几乎不可用。RocketMQ则仍能保持较高的吞吐量。&lt;/li&gt;
&lt;li&gt;在单机可靠性方面，RocketMQ综合表现优于Kafka。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>C/C&#43;&#43;中宏定义的用法</title>
        <link>https://sohunjug.com/2015/01/13/c-defined/</link>
        <pubDate>Tue, 13 Jan 2015 15:59:59 +0800</pubDate>
        
        <guid>https://sohunjug.com/2015/01/13/c-defined/</guid>
        <description>&lt;p&gt;无论是在网络上还是项目中，define的用法非常广泛，define是由预处理程序自动完成的，被成为宏定义。&lt;/p&gt;
&lt;p&gt;宏定义的作用范围仅限于当前文件(头文件除外，包含该头文件的源文件中都可使用)，一般define分为有参数和无参数两种。&lt;/p&gt;
&lt;h1 id=&#34;宏定义优点&#34;&gt;宏定义优点&lt;/h1&gt;
&lt;h2 id=&#34;1-方便程序的修改&#34;&gt;(1) 方便程序的修改&lt;/h2&gt;
&lt;p&gt;使用简单宏定义可用宏代替一个在程序中经常使用的常量，这样在将该常量改变时，不用对整个程序进行修改，只修改宏定义的字符串即可，而且当常量比较长时， 我们可以用较短的有意义的标识符来写程序，这样更方便一些。我们所说的常量改变不是在程序运行期间改变，而是在编程期间的修改，举一个大家比较熟悉的例 子，圆周率π是在数学上常用的一个值，有时我们会用3.14来表示，有时也会用3.1415926等，这要看计算所需要的精度，如果我们编制的一个程序中 要多次使用它，那么需要确定一个数值，在本次运行中不改变，但也许后来发现程序所表现的精度有变化，需要改变它的值， 这就需要修改程序中所有的相关数值，这会给我们带来一定的不便，但如果使用宏定义，使用一个标识符来代替，则在修改时只修改宏定义即可，还可以减少输入 3.1415926这样长的数值多次的情况，我们可以如此定义 #define pi 3.1415926，既减少了输入又便于修改，何乐而不为呢？&lt;/p&gt;
&lt;h2 id=&#34;2-提高程序的运行效率&#34;&gt;(2) 提高程序的运行效率&lt;/h2&gt;
&lt;p&gt;使用带参数的宏定义可完成函数调用的功能，又能减少系统开销，提高运行效率。正如C语言中所讲，函数的使用可以使程序更加模块化，便于组织，而且可重复利用，但在发生函数调用时，需要保留调用函数的现场，以便子函数执行结束后能返回继续执行，同样在子函数执行完后要恢复调用函数的现场，这都需要一定的时间，如果子函数执行的操作比较多，这种转换时间开销可以忽略，但如果子函数完成的功能比较少，甚至于只完成一点操作，如一个乘法语句的操作，则这部分转换开销就相对较大了，但使用带参数的宏定义就不会出现这个问 题，因为它是在预处理阶段即进行了宏展开，在执行时不需要转换，即在当地执行。宏定义可完成简单的操作，但复杂的操作还是要由函数调用来完成，而且宏定义所占用的目标代码空间相对较大。所以在使用时要依据具体情况来决定是否使用宏定义。&lt;/p&gt;
&lt;h1 id=&#34;宏定义的高级用法&#34;&gt;宏定义的高级用法&lt;/h1&gt;
&lt;p&gt;在网上经常会看到一些人在宏定义中使用#号的例子&lt;/p&gt;
&lt;h2 id=&#34;1单个符号&#34;&gt;(1)#单个#符号&lt;/h2&gt;
&lt;p&gt;单个#号是将当前参数变为字符串.如:
{% codeblock lang:cpp %}
#define TOSTR(X) #X
{% endcodeblock %}&lt;/p&gt;
&lt;h2 id=&#34;2双符号&#34;&gt;(2)##双#符号&lt;/h2&gt;
&lt;p&gt;##则用来连接前后两个参数，把它们变成一个字符串。如:
{% codeblock lang:cpp %}
#define STRCAT(X, Y) X##Y
{% endcodeblock %}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;宏定义推荐写法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在有些使用宏定义中会看到一些不一样的写法&lt;/p&gt;
&lt;p&gt;如:
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define _log_(_std, _format, ...)                              \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;    do {                                                       \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;        if (_std)                                              \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;            fprintf(_std, _format, ##__VA_ARGS__);             \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;        else                                                   \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;            fprintf(stdout, _format, ##__VA_ARGS__);           \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;    } while(0)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
有些人可能会有疑问为什么会要加一个do{}while(0)?
如果没有就会变成
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define _log_(_std, _format, ...)                              \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;        if (_std)                                              \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;            fprintf(_std, _format, ##__VA_ARGS__);             \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;        else                                                   \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;            fprintf(stdout, _format, ##__VA_ARGS__); &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
可能大家认为这个也可以，但是如果用法是这样呢?
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;n&#34;&gt;_log_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
展开就会变成
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_std&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                                                            
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_std&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;									 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nf&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
这样明显就会出现两个else了，语法错误，而有些人喜欢使用{}来替换do{}while(0)，&lt;/p&gt;
&lt;p&gt;让我们来想想一下展开会是什么结果呢？
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_std&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                                                            
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_std&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;									 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nf&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
还是错误的else前面多了一个;
而do{}while(0)这种写法完全避免了类似的问题，另外, 现代编译器的优化模块能够足够聪明地注意到这个循环只会执行一次而将其优化掉.
综上所述, do { } while(0) 这个技术就是为了类似的宏可以在任何时候使用.&lt;/p&gt;
&lt;h1 id=&#34;宏定义的其他用途&#34;&gt;宏定义的其他用途&lt;/h1&gt;
&lt;p&gt;而宏定义在项目中最好用的地方，就是完成跨平台支持，众所周知想linux，windows，mac，android等这些系统，在一些底层函数，编译参数等等都有不同，所以在项目中，完全可以使用#ifdefine 等宏定义来区分当前的系统环境，更可以细化到系统版本的分别，来完成针对化编译。这样完美的支持各种不同的环境。&lt;/p&gt;
&lt;p&gt;在linux，mac等环境可以查看一些系统已经定义好的环境变量来帮助我们区分，可以使用命令来查看
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gcc -E -dM - &amp;lt; /dev/null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;而windows可以登录msdn网站查看&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://msdn.microsoft.com/zh-cn/library/b0084kay&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;msdn.microsoft.com&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>个人搭建git服务器与webmail服务器</title>
        <link>https://sohunjug.com/2014/06/24/%E4%B8%AA%E4%BA%BA%E6%90%AD%E5%BB%BAgit%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8Ewebmail%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
        <pubDate>Tue, 24 Jun 2014 20:15:57 +0800</pubDate>
        
        <guid>https://sohunjug.com/2014/06/24/%E4%B8%AA%E4%BA%BA%E6%90%AD%E5%BB%BAgit%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8Ewebmail%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
        <description>&lt;p&gt;最近看到一句令人很有感觉的一句话，&amp;ldquo;The best is yet to come&amp;hellip;&amp;quot;，而我本人也很相信这句话。&lt;/p&gt;
&lt;p&gt;在这个一天天各种新技术出生的年代，大家都想什么技术都熟悉一点，不至于让人说out了，而本人又是处女座的，有那么点强迫症，非常喜欢使用自己的东西，所以索性就搭建了自己的git服务器。而Apple新出的OSX10.10 DP2又依然没有解决邮件客户端的问题，感觉又很不爽，正好看到过一个RainLoop的帖子，所以也把WebMail捅咕上了。&lt;/p&gt;
&lt;p&gt;搭建git服务器还是很简单的网上教程一大把，但我个人非常推荐这个&lt;a class=&#34;link&#34; href=&#34;https://blog.huhamhire.com/tags/git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;huhamhire博客&lt;/a&gt;，里面的东西很杂，支持的gitweb也有好多，我搭建使用的是gitlist，后续打算再做一个密码验证功能，怎么说大家写的代码也不可能所有的都是开源不是，每个人都会有自己的隐私～&lt;/p&gt;
&lt;p&gt;WebMail相对来说就更简单了，网上找到的这个&lt;a class=&#34;link&#34; href=&#34;http://rainloop.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RainLoop&lt;/a&gt;实在太赞了，界面也很美观，但个人感觉还是应该做成用户名密码验证的，这样直接登录用户名密码就好了。现在每次都需要打邮箱全名加密码，很不爽～&lt;/p&gt;
&lt;p&gt;在此，以后个人开源的代码也就放在我自己的git上了，欢迎大家提供宝贵的意见哈～&lt;/p&gt;</description>
        </item>
        <item>
        <title>终于从wordpress转移到了octopress</title>
        <link>https://sohunjug.com/2014/04/19/%E7%BB%88%E4%BA%8E%E4%BB%8Ewordpress%E8%BD%AC%E7%A7%BB%E5%88%B0%E4%BA%86octopress/</link>
        <pubDate>Sat, 19 Apr 2014 16:20:27 +0800</pubDate>
        
        <guid>https://sohunjug.com/2014/04/19/%E7%BB%88%E4%BA%8E%E4%BB%8Ewordpress%E8%BD%AC%E7%A7%BB%E5%88%B0%E4%BA%86octopress/</guid>
        <description>&lt;p&gt;从大学开始就折腾过wordpress，工作后也确实一直用着wordpress。步入社会发现大学里面的都算不上皮毛，不懂的东西实在太多了，如饥似渴的小小学习2年，终于换了份工作。&lt;/p&gt;
&lt;p&gt;当日子一步步的步上正轨，我的学习热情也慢慢回升了。记得是半年前吧，突然听说了octopress这个博客，只看介绍(A blogging framework for hackers.)就给人一种高大上的感觉哈。当时就想折腾下，可惜因为工作也忙，也想换工作，一直拖到了现在。&lt;/p&gt;
&lt;p&gt;新工作依然还是程序员，比较热爱这个职业吧。当做出一个作品时那种快感，没做过的人是体验不到的。平时上班因为刚入职，还不忙，正好下班就可以捅咕自己的东西了。可能因为处女座的原因，尤其喜欢把这些东西搞到自己的服务器上。没事看看vps，发现阿里云现在很便宜嘛，一个月才55，而且还可以申请试用5天，想到就办，申请个试用的，搭建环境测试，满意之后买vps。&lt;/p&gt;
&lt;p&gt;首先找到了部署vps的文章才大概明白了一些原理(汗，原来以为还需要架设git服务器)。&lt;a class=&#34;link&#34; href=&#34;http://www.xiaozhou.net/deploy-octopress-to-your-vps-2013-08-13.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;部署Octopress到你的VPS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其实网上很多博客写的都不是很明白，octopress根本没有那么复杂，只需要下载&lt;a class=&#34;link&#34; href=&#34;http://octopress.org&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;octopress&lt;/a&gt;，然后在自己的本机上配置，设置好ssh连接，就会同步到vps主机上，因为octopress是静态网页，只需要同步到服务器的网站目录就OK了。&lt;/p&gt;
&lt;p&gt;当时喜欢上octopress也是因为这个主题，我也找了好久，推荐给大家哈：&lt;a class=&#34;link&#34; href=&#34;http://shashankmehta.in/archive/2012/greyshade.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;链接地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;详细的个性化配置我就不阐述了，网上资料也是可以找得到的。&lt;/p&gt;
&lt;p&gt;博客以后应该会经常更新了，欢迎大家前来指点哦！&lt;/p&gt;</description>
        </item>
        <item>
        <title>Mac应用开发-启程</title>
        <link>https://sohunjug.com/2014/02/27/mac%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-%E5%90%AF%E7%A8%8B/</link>
        <pubDate>Thu, 27 Feb 2014 00:00:00 +0800</pubDate>
        
        <guid>https://sohunjug.com/2014/02/27/mac%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-%E5%90%AF%E7%A8%8B/</guid>
        <description>&lt;p&gt;最近和一些小伙伴一起合伙做了个小玩具，大家感觉还是满开心的，网站是&lt;a class=&#34;link&#34; href=&#34;http://www.parld.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;parld音乐聚汇&lt;/a&gt;(推广下哈)。其中Mac客户端&lt;a class=&#34;link&#34; href=&#34;http://www.parld.com/api?act=download&amp;amp;type=mac&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前的Mac客户端功能还很简单，但是已经不影响使用了，制作过程中遇到了各种问题，发现在网上找Mac开发的相关资源实在是太难，所以我也同步写一点吧，分享给大家&lt;/p&gt;
&lt;p&gt;** 2016-08-11 **&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于项目搁浅，现分享下当时的macOS端代码，objective-c代码&lt;a class=&#34;link&#34; href=&#34;http://git.oschina.net/sohunjug/Parld-macOS&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git-oschina&lt;/a&gt;，&lt;a class=&#34;link&#34; href=&#34;https://github.com/sohunjug/Parld-macOS.git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;
代码技术都比较老了，欢迎指教。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先是音乐播放问题，对于第一次开发来说，我是在网上找了好多的demo来测试，所以选择了AudioStreamer，其次，需要做状态栏应用，所以找了一段代码
{% codeblock lang:objc %}
NSMenu		*menu;&lt;/p&gt;
&lt;p&gt;_statusItem = [[NSStatusBar systemStatusBar] statusItemWithLength:NSVariableStatusItemLength] ;&lt;/p&gt;
&lt;p&gt;[_statusItem setImage:[NSImage imageNamed:@&amp;ldquo;start&amp;rdquo;]];
[_statusItem setHighlightMode:YES];
[_statusItem setTitle:@&amp;quot; 音乐汇聚&amp;quot;];&lt;/p&gt;
&lt;p&gt;menu = [[NSMenu alloc] initWithTitle:@&amp;ldquo;音乐汇聚&amp;rdquo;];
[menu addItemWithTitle:@&amp;ldquo;上一首&amp;rdquo; action:@selector(pre) keyEquivalent:@&amp;quot;&amp;quot;];
[menu addItemWithTitle:@&amp;ldquo;下一首&amp;rdquo; action:@selector(next) keyEquivalent:@&amp;quot;&amp;quot;];
[menu addItemWithTitle:@&amp;ldquo;更新音乐池&amp;rdquo; action:@selector(updateMusic) keyEquivalent:@&amp;quot;&amp;quot;];
[menu addItemWithTitle:@&amp;ldquo;关于&amp;rdquo; action:@selector(orderFrontStandardAboutPanel:) keyEquivalent:@&amp;quot;&amp;quot;];
[menu addItemWithTitle:@&amp;ldquo;退出&amp;rdquo; action:@selector(exit:) keyEquivalent:@&amp;quot;&amp;quot;];
[menu addObserver:view forKeyPath:@&amp;ldquo;123&amp;rdquo; options:NSKeyValueObservingOptionNew context:nil];
[_statusItem setMenu:menu];
{% endcodeblock %}
之后需要做的就是逻辑了，获取歌单，播放歌单。
后期的版本又添加了Mac笔记本的媒体播放键功能，同样是找了一段代码，封装好的，如果想了解原理也可自行下载。SPMediaKeyTap。
加入之后需要修改主程序
添加继承NSApplication的类
{% codeblock lang:objc %}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(void)sendEvent:(NSEvent *)theEvent
{
// If event tap is not installed, handle events that reach the app instead
BOOL shouldHandleMediaKeyEventLocally = ![SPMediaKeyTap usesGlobalMediaKeyTap];&lt;/p&gt;
&lt;p&gt;if(shouldHandleMediaKeyEventLocally &amp;amp;&amp;amp; [theEvent type] == NSSystemDefined &amp;amp;&amp;amp; [theEvent subtype] == SPSystemDefinedEventMediaKeys) {
[(id)[self delegate] mediaKeyTap:nil receivedMediaKeyEvent:theEvent];
}
[super sendEvent:theEvent];
}
{% endcodeblock %}
${PRODUCT_NAME}-Info.plist文件中Principal class字段修改为重写的NSApplication&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;并在主AppDelegate添加按键映射
{% codeblock lang:objc %}
-(void)mediaKeyTap:(SPMediaKeyTap*)keyTap receivedMediaKeyEvent:(NSEvent*)event;
{
NSAssert([event type] == NSSystemDefined &amp;amp;&amp;amp; [event subtype] == SPSystemDefinedEventMediaKeys, @&amp;ldquo;Unexpected NSEvent in mediaKeyTap:receivedMediaKeyEvent:&amp;rdquo;);
// here be dragons&amp;hellip;
int keyCode = (([event data1] &amp;amp; 0xFFFF0000) &amp;raquo; 16);
int keyFlags = ([event data1] &amp;amp; 0x0000FFFF);
BOOL keyIsPressed = (((keyFlags &amp;amp; 0xFF00) &amp;raquo; 8)) == 0xA;
int keyRepeat = (keyFlags &amp;amp; 0x1);&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (keyIsPressed) {
	NSString *debugString;
    debugString = [NSString stringWithFormat:@&amp;quot;%@&amp;quot;, keyRepeat?@&amp;quot;, repeated.&amp;quot;:@&amp;quot;.&amp;quot;];
	switch (keyCode) {
		case NX_KEYTYPE_PLAY:
			if (_isPlay) {
                [self pauseMusic];
            }
            else{
                [self playMusic];
            }
			break;
			
		case NX_KEYTYPE_FAST:
			[self nextMusic];
			break;
			
		case NX_KEYTYPE_REWIND:
			[self lastMusic];
			break;
		default:
            break;
            // More cases defined in hidsystem/ev_keymap.h
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}
{% endcodeblock %}
还要添加一个开机自启动的配置，同样可以使用LaunchAtLoginController，只需要将Check控件的value绑定到LaunchAtLoginController里面的launchAtLogin变量上即可&lt;/p&gt;
&lt;p&gt;以上就是第一个初级版本所用到的技术，比较简单，但是还是蛮实用的。
而从今天开始，打算重构做第二版本，支持Mac悬浮窗，拖拽文件上传，悬浮窗下拉主窗体，目前基本功能的技术难点已经基本完成，后续会继续发表博客。&lt;/p&gt;
&lt;p&gt;在如今Mac已经越来越多的情况下，Mac开发人员还是比较少的，希望大家都能一起来讨论讨论技术。共同提高&lt;/p&gt;</description>
        </item>
        <item>
        <title>基于类成员函数回调的线程池-连接池-任务队列</title>
        <link>https://sohunjug.com/2013/11/28/%E5%9F%BA%E4%BA%8E%E7%B1%BB%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E5%9B%9E%E8%B0%83%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0-%E8%BF%9E%E6%8E%A5%E6%B1%A0-%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/</link>
        <pubDate>Thu, 28 Nov 2013 00:00:00 +0800</pubDate>
        
        <guid>https://sohunjug.com/2013/11/28/%E5%9F%BA%E4%BA%8E%E7%B1%BB%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E5%9B%9E%E8%B0%83%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0-%E8%BF%9E%E6%8E%A5%E6%B1%A0-%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/</guid>
        <description>&lt;p&gt;在现实生活中，经常会用到线程池与队列的应用，所以写了一套可复利用接口。&lt;/p&gt;
&lt;p&gt;其中优先级队列的蓝本从stl中复制出来的，唯一修改的地方就是添加了一个写锁，当top时加锁，pop后才解锁，保证真正不重复取出或丢失数据。
因为使用模板来构造，所以目前只支持类成员函数的回调。
与线程池共同使用时，外部调用时，需要new一个任务类来添加到队列中，线程池主函数会调用完成后自动delete析构。&lt;/p&gt;
&lt;p&gt;此基于成员函数回调的线程池需要同优先级队列共同使用，原理是初始化一个初始为5个线程的线程池，并将自己的控制线程添加到最高优先级启动。控制线程的目的是当任务队列比较多时增加线程来增加效率，当任务队列少时减速线程来节约资源（目前未实现）&lt;/p&gt;
&lt;p&gt;连接池，需要同线程池与任务队列共同使用，同样为先初始化一定数量的连接，供多线程调度使用，其中包含一个控制线程，来控制连接池中的连接数量，当取出一个连接来用时，会给取出的连接加锁，所以使用完后需要调用返回函数，来归还使用完的连接。&lt;/p&gt;
&lt;p&gt;连接池的作用就是不必每次都创建连接使用完成后断开连接，而使用模板来构造扩展性更强，所以需要自己额外来写创建连接，与断开连接函数。&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;需要注意连接池需要在线程之前析构。&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;任务队列文件代码：&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;  1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 79
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 80
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 81
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 82
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 83
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 84
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 85
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 86
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 87
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 88
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 89
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 90
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 91
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 92
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 93
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 94
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 95
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 96
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 97
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 98
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 99
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;100
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;101
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;102
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;103
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;104
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;105
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;106
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;107
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;108
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;109
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;110
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;111
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;112
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;113
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;114
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;115
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;116
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;117
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;118
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;119
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;120
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;121
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;122
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;123
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;124
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;125
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;126
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;127
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;128
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;129
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;130
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;131
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;132
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;133
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;134
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;135
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;136
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;137
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;138
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;139
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;140
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;141
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;142
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;143
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;144
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;145
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;146
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;147
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;148
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;149
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;150
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;151
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;152
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;153
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;154
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;155
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;156
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;157
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;158
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;159
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;160
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;161
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;162
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;163
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;164
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;165
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;166
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;167
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;168
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;169
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;170
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;171
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;172
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;173
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;174
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;175
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;176
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;177
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;178
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;179
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;180
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;181
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;182
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;183
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;184
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;185
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;186
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*******************************************************************************
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * Author : huwq
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * Email : sohunjug@hotmail.com
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * Last modified : 2013-11-18 10:46
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * Filename : CTaskQueue.h
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * Description : 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * *****************************************************************************/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#ifndef __TASH_QUEUE_H__
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define __TASH_QUEUE_H__
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;new&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;QUEUE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Priority&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Urgent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Highest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;High&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Middle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Low&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Minimum&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CTaskBase&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;Priority&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;priority&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;CTaskBase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;is_virtual&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CTaskBase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CTaskBase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CTaskBase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CTaskBase&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CTaskBase&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CTaskBase&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;priority&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;priority&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;is_virtual&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CTaskQueue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CTaskBase&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;union&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CallBack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;CTaskQueue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;ClassName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CTaskQueue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;Clear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Clear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;ClassName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;SetFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Priority&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;priority&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;priority&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;priority&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ClassName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;//return func.CallBack(ClassName, argv);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ClassName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_Tp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_Sequence&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_Tp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_Compare&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;less&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;priority_queue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;// concept requirements
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;n&#34;&gt;pthread_rwlock_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value_type&lt;/span&gt;                &lt;span class=&#34;n&#34;&gt;value_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reference&lt;/span&gt;                 &lt;span class=&#34;n&#34;&gt;reference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;const_reference&lt;/span&gt;           &lt;span class=&#34;n&#34;&gt;const_reference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt;                 &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt;          &lt;span class=&#34;n&#34;&gt;_Sequence&lt;/span&gt;                            &lt;span class=&#34;n&#34;&gt;container_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;//  See queue::c for notes on these names.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                &lt;span class=&#34;n&#34;&gt;_Sequence&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;_Compare&lt;/span&gt;   &lt;span class=&#34;n&#34;&gt;comp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;priority_queue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_Compare&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_Compare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_Sequence&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;comp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;pthread_rwlock_init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;make_heap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;comp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_InputIterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;priority_queue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_InputIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_InputIterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_Compare&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_Compare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_Sequence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_Sequence&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;comp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;n&#34;&gt;pthread_rwlock_init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;n&#34;&gt;__glibcxx_requires_valid_range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__first&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;make_heap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;comp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;pthread_rwlock_wrlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;pthread_rwlock_unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;pthread_rwlock_wrlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;size_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;pthread_rwlock_unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;const_reference&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;pthread_rwlock_wrlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;const_reference&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reference_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;front&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reference_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value_type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;pthread_rwlock_wrlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push_heap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;comp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;pthread_rwlock_unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop_heap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;comp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;pthread_rwlock_unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m_mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;priority_queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CTaskBase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CTaskBase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CTaskBase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;queue_priority&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;线程池与连接池文件代码：&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
{% codeblock lang:cpp %}
/*******************************************************************************&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Author : RKhuwq&lt;/li&gt;
&lt;li&gt;Email : &lt;a class=&#34;link&#34; href=&#34;mailto:sohunjug@hotmail.com&#34; &gt;sohunjug@hotmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Last modified : 2013-11-18 16:55&lt;/li&gt;
&lt;li&gt;Filename : Pool.h&lt;/li&gt;
&lt;li&gt;Description :&lt;/li&gt;
&lt;li&gt;*****************************************************************************/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#ifndef &lt;strong&gt;POOL_H&lt;/strong&gt;
#define &lt;strong&gt;POOL_H&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;#include &amp;lt;pthread.h&amp;gt;
#include &lt;!-- raw HTML omitted --&gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;ldquo;TaskQueue.h&amp;rdquo;
#include &amp;lt;signal.h&amp;gt;&lt;/p&gt;
&lt;p&gt;namespace POOL
{
enum PoolStatue
{
Wait = 1,
Kill
};
class CPoolBase
{
protected:
int m_init;
int m_iNum;
int m_iCount;
pthread_attr_t m_attr;
virtual void  Create() = 0;
virtual int   ControlThread(void* argv) = 0;
public:
PoolStatue statues;
pthread_mutex_t m_mutex;
pthread_mutexattr_t  m_mutexAttr;
CPoolBase(int num, PoolStatue statue) : m_init(num), m_iNum(5), m_iCount(0), statues(statue)
{
pthread_attr_init(&amp;amp;m_attr);
pthread_attr_setdetachstate(&amp;amp;m_attr,PTHREAD_CREATE_JOINABLE);
pthread_mutexattr_init(&amp;amp;m_mutexAttr);
pthread_mutex_init(&amp;amp;m_mutex, &amp;amp;m_mutexAttr);
}
virtual ~CPoolBase()
{
pthread_mutexattr_destroy(&amp;amp;m_mutexAttr);
};
};&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class CThreadPool : public CPoolBase
{
    struct pthread_statue
    {
        pthread_t pthread_id;
        int statue;
        pthread_mutex_t m_threadMutex;
        pthread_cond_t  m_threadCond;
    };
    public:
    std::map&amp;lt;pthread_t, pthread_statue*&amp;gt; m_mthread;
    std::map&amp;lt;pthread_t, pthread_statue*&amp;gt;::iterator m_iter;
    QUEUE::queue_priority&amp;amp; queue;

    private:
    bool is_clear;
    pthread_mutex_t m_mutexCount;
    QUEUE::CTaskQueue&amp;lt;CThreadPool&amp;gt; *owntask;
    void Create()
    {
        pthread_statue *new_pthread = new pthread_statue();
        pthread_mutex_lock(&amp;amp;m_mutex);
        if(pthread_create(&amp;amp;new_pthread-&amp;gt;pthread_id, &amp;amp;m_attr, ThreadMain, this)!=0)
        {
            return ;
        }
        m_mthread.insert(std::pair&amp;lt;pthread_t, pthread_statue*&amp;gt; (new_pthread-&amp;gt;pthread_id, new_pthread));
        pthread_mutex_unlock(&amp;amp;m_mutex);
        pthread_mutex_lock(&amp;amp;m_mutexCount);
        m_iCount++;
        pthread_mutex_unlock(&amp;amp;m_mutexCount);
    }
    int   ControlThread(void* argv)
    {
        int in_count_add = 0;
        int in_count_del = 0;
        int task_count;
        bool change;
        CThreadPool* pclass = (CThreadPool*)argv;
        pthread_statue *statue_self;
        std::map&amp;lt;pthread_t, pthread_statue*&amp;gt;::iterator iter;
        pthread_mutex_lock(&amp;amp;pclass-&amp;gt;m_mutex);
        statue_self = pclass-&amp;gt;m_mthread.find(pthread_self())-&amp;gt;second;
        pthread_mutex_unlock(&amp;amp;pclass-&amp;gt;m_mutex);
        statue_self-&amp;gt;statue = 1;
        while(1)
        {
            while (m_iCount &amp;lt; m_init &amp;amp;&amp;amp; m_iCount &amp;lt; m_iNum &amp;amp;&amp;amp; ((statues == Wait &amp;amp;&amp;amp; !queue.empty()) || !is_clear))
            {
                Create();
            }
            task_count = queue.size();
            if (task_count)
            {
                pthread_mutex_lock(&amp;amp;m_mutex);
                iter = m_mthread.begin();
                while (iter != m_mthread.end() &amp;amp;&amp;amp; ((statues == Wait &amp;amp;&amp;amp; !queue.empty()) || !is_clear))
                {
                    if (iter-&amp;gt;second-&amp;gt;statue == 2 &amp;amp;&amp;amp; iter-&amp;gt;second-&amp;gt;pthread_id != pthread_self())
                    {
                        pthread_cond_signal (&amp;amp;iter-&amp;gt;second-&amp;gt;m_threadCond);
                        break;
                    }
                    iter++;
                }
                if (iter == m_mthread.end())
                    m_iNum ++;
                pthread_mutex_unlock(&amp;amp;m_mutex);
                if (task_count &amp;gt; m_iCount)
                {
                    in_count_add++;
                    in_count_del = 0;
                }
                else if (task_count &amp;lt; m_iCount)
                {
                    //in_count_del++;
                    in_count_add = 0;
                }
                if (in_count_add &amp;gt; 10)
                {
                    in_count_add = 0;
                    m_iNum++;
                    change = true;
                }
                if (in_count_del &amp;gt; 10 &amp;amp;&amp;amp; m_iNum &amp;gt; m_init)
                {
                    m_iNum--;
                    change = true;
                }
            }
            if (task_count == 0)
                usleep(100);

            if ((statue_self-&amp;gt;statue == 0 || is_clear) &amp;amp;&amp;amp; !(statues == Wait &amp;amp;&amp;amp; !queue.empty()))
            {
                pthread_mutex_lock(&amp;amp;m_mutexCount);
                pclass-&amp;gt;m_iCount--;
                pthread_mutex_unlock(&amp;amp;m_mutexCount);
                break;
            }
        }
        return 0;
    } 
    public:
    static void* ThreadMain(void *arg)
    {
        pthread_statue* statue_self;
        CThreadPool* pclass = (CThreadPool*)arg;
        QUEUE::CTaskBase* task = NULL;
        pthread_mutex_lock(&amp;amp;pclass-&amp;gt;m_mutex);
        statue_self = pclass-&amp;gt;m_mthread.find(pthread_self())-&amp;gt;second;
        pthread_mutex_unlock(&amp;amp;pclass-&amp;gt;m_mutex);
        pthread_mutex_init (&amp;amp;statue_self-&amp;gt;m_threadMutex, &amp;amp;pclass-&amp;gt;m_mutexAttr);
        pthread_cond_init (&amp;amp;statue_self-&amp;gt;m_threadCond, NULL);
        statue_self-&amp;gt;statue = 1;
        //timespec time;
        statue_self-&amp;gt;pthread_id = pthread_self();
        while(1)
        { 
            if (pclass-&amp;gt;statues != Wait || pclass-&amp;gt;queue.empty())
            {
                if (statue_self-&amp;gt;statue == 0)
                {
                    pthread_mutex_lock(&amp;amp;pclass-&amp;gt;m_mutexCount);
                    pclass-&amp;gt;m_iCount--;
                    pthread_mutex_unlock(&amp;amp;pclass-&amp;gt;m_mutexCount);
                    break;
                }
            }
            task = NULL;

            pthread_mutex_lock(&amp;amp;pclass-&amp;gt;m_mutex);
            if(pclass-&amp;gt;queue.empty())
            {
                if (pthread_mutex_trylock(&amp;amp;statue_self-&amp;gt;m_threadMutex) != 0)
                {
                    pthread_mutex_unlock(&amp;amp;pclass-&amp;gt;m_mutex);
                    continue;
                }
                pthread_mutex_unlock(&amp;amp;pclass-&amp;gt;m_mutex);
                statue_self-&amp;gt;statue = 2;
                pthread_cond_wait(&amp;amp;statue_self-&amp;gt;m_threadCond, &amp;amp;statue_self-&amp;gt;m_threadMutex);
                pthread_mutex_unlock(&amp;amp;statue_self-&amp;gt;m_threadMutex);
                continue;
            }

            task=pclass-&amp;gt;queue.top();
            pclass-&amp;gt;queue.pop();
            pthread_mutex_unlock(&amp;amp;pclass-&amp;gt;m_mutex);

            if (task)
            {
                statue_self-&amp;gt;statue = 1;
                if (task-&amp;gt;Start() != 0)
                {
                }
                if (!task)
                    delete task;
            }
        }
        return NULL;
    }
    void Stop(pthread_t pthread_id)
    {
        pthread_statue *temp;
        pthread_mutex_lock(&amp;amp;m_mutex);
        temp = m_mthread.find(pthread_id)-&amp;gt;second;
        pthread_mutex_unlock(&amp;amp;m_mutex);
        if (!temp)
            return;
        while(pthread_kill(temp-&amp;gt;pthread_id, 0) == 0)
        {
            pthread_mutex_lock(&amp;amp;temp-&amp;gt;m_threadMutex);
            temp-&amp;gt;statue = 0;
            pthread_mutex_unlock(&amp;amp;temp-&amp;gt;m_threadMutex);
            pthread_cond_signal(&amp;amp;temp-&amp;gt;m_threadCond);
            usleep(10000);
        }
        pthread_mutex_lock(&amp;amp;m_mutex);
        temp = m_mthread.find(pthread_id)-&amp;gt;second;
        m_mthread.erase(pthread_id);
        pthread_mutex_unlock(&amp;amp;m_mutex);
        delete temp;
    }
    void ClearQueue() 
    { 
        while (!queue.empty())
        {
            delete queue.top();
            queue.pop();
        }
    }
    void Clear()
    {
        is_clear = true;
        pthread_mutex_lock(&amp;amp;m_mutex); 
        std::map&amp;lt;pthread_t, pthread_statue*&amp;gt;::iterator iter = m_mthread.begin();
        for (; iter != m_mthread.end(); iter = m_mthread.begin())
        {
            pthread_mutex_unlock(&amp;amp;m_mutex); 
            Stop(iter-&amp;gt;first);
            pthread_mutex_lock(&amp;amp;m_mutex); 
        }
        pthread_mutex_unlock(&amp;amp;m_mutex); 
    }

    public:
    CThreadPool(int num, QUEUE::queue_priority&amp;amp; queue, PoolStatue Pool = Wait) : CPoolBase(num, Pool), queue(queue), is_clear(false) 
    { 
        pthread_mutex_init (&amp;amp;m_mutexCount, NULL);
        owntask = new QUEUE::CTaskQueue&amp;lt;CThreadPool&amp;gt;;
        owntask-&amp;gt;SetFunc(QUEUE::Urgent, this, &amp;amp;CThreadPool::ControlThread, this);
        queue.push(owntask);
        Create(); 
    }
    ~CThreadPool()
    { 
        if (statues == Wait)
            Clear(); 
        ClearQueue(); 
        if (statues != Wait)
            Clear();
    }
};

template&amp;lt;typename CConnectionClass&amp;gt;
    class CConnectPool : public CPoolBase
{
    private:
        std::map&amp;lt;CConnectionClass*, pthread_mutex_t&amp;gt; m_mapConnection;
        typename std::map&amp;lt;CConnectionClass*, pthread_mutex_t&amp;gt;::iterator m_iter;
        bool is_clear;
        typedef bool (CConnectionClass::*Connect)(const char*, const char*, const char*);
        typedef void (CConnectionClass::*Close)(void);
        Connect m_fconnect;
        Close m_fclose;
        char* m_sConnectParam[3];
        int m_iUsed;
        pthread_mutex_t m_mapmutex;
    public:
        CConnectPool(int num) : CPoolBase(num, Wait), m_iUsed(0)
    {
        is_clear = false;
        m_mapConnection.clear();
        m_sConnectParam[0] = NULL;
        m_sConnectParam[1] = NULL;
        m_sConnectParam[2] = NULL;
        pthread_mutex_init(&amp;amp;m_mapmutex, NULL);
    }
        ~CConnectPool()
        {
            Clear();
            free(m_sConnectParam[0]);
            free(m_sConnectParam[1]);
            free(m_sConnectParam[2]);
        }

        void Clear()
        {
            is_clear = true;
            m_iter = m_mapConnection.begin();
            while (m_iter != m_mapConnection.end())
            {
                if (pthread_mutex_trylock(&amp;amp;m_iter-&amp;gt;second) == 0)
                {
                    (m_iter-&amp;gt;first-&amp;gt;*(m_fclose))();
                    delete m_iter-&amp;gt;first;
                    m_mapConnection.erase(m_iter);
                    m_iter = m_mapConnection.begin();
                    pthread_mutex_lock(&amp;amp;m_mutex);
                    m_iCount --;
                    pthread_mutex_unlock(&amp;amp;m_mutex);
                }
                else m_iter++;
                if (m_iter == m_mapConnection.end())
                    m_iter = m_mapConnection.begin();
            }
            m_mapConnection.clear();
        }

        void SetFunc(Connect connect, Close close, char* value[])
        {
            m_fconnect = connect;
            m_fclose = close;
            m_sConnectParam[0] = (char*)malloc(strlen(value[0]) + 1);
            m_sConnectParam[1] = (char*)malloc(strlen(value[1]) + 1);
            m_sConnectParam[2] = (char*)malloc(strlen(value[2]) + 1);
            strcpy(m_sConnectParam[0], value[0]);
            strcpy(m_sConnectParam[1], value[1]);
            strcpy(m_sConnectParam[2], value[2]);
        }

        CConnectionClass* GetConnection()
        {
            pthread_mutex_lock(&amp;amp;m_mapmutex);
            int count = 0;
            m_iter = m_mapConnection.begin();
            while (1)
            {
                if (m_iter == m_mapConnection.end())
                {
                    count ++;
                    m_iter = m_mapConnection.begin();
                    if (count &amp;gt; 10)
                    {
                        Create();
                        pthread_mutex_lock(&amp;amp;m_mutex);
                        m_iNum++;
                        pthread_mutex_unlock(&amp;amp;m_mutex);
                        m_iter = m_mapConnection.begin();
                    }
                }
                if (m_iter != m_mapConnection.end())
                    if (pthread_mutex_trylock(&amp;amp;m_iter-&amp;gt;second) == 0)
                    {
                        pthread_mutex_lock(&amp;amp;m_mutex);
                        m_iUsed++;
                        pthread_mutex_unlock(&amp;amp;m_mutex);
                        pthread_mutex_unlock(&amp;amp;m_mapmutex);
                        return m_iter-&amp;gt;first;
                    }
                    else m_iter++;
            }
            pthread_mutex_unlock(&amp;amp;m_mapmutex);
            return NULL;
        }

        void BackConnection(CConnectionClass* oneConnect)
        {
            if (!oneConnect)
                return;
            pthread_mutex_lock(&amp;amp;m_mapmutex);
            pthread_mutex_unlock(&amp;amp;m_mapConnection.find(oneConnect)-&amp;gt;second);
            pthread_mutex_unlock(&amp;amp;m_mapmutex);
            pthread_mutex_lock(&amp;amp;m_mutex);
            m_iUsed--;
            pthread_mutex_unlock(&amp;amp;m_mutex);
        }

        void Create()
        {
            pthread_mutex_t rwlock;
            pthread_mutex_init(&amp;amp;rwlock, NULL);
            pthread_mutex_lock(&amp;amp;m_mutex);
            CConnectionClass* oneConnect = new CConnectionClass();
            (oneConnect-&amp;gt;*(m_fconnect))(m_sConnectParam[0], m_sConnectParam[1], m_sConnectParam[2]);
            m_mapConnection.insert(std::pair&amp;lt;CConnectionClass*, pthread_mutex_t&amp;gt; (oneConnect, rwlock));
            m_iCount ++;
            pthread_mutex_unlock(&amp;amp;m_mutex);
        }

        int  Count()
        {
            return m_mapConnection.size();
        }

        int  ControlThread(void* argv)
        {
            int in_count_add = 0;
            int in_count_del = 0;
            int task_count;
            int second = 10000;
            bool change;
            while(1)
            {
                task_count = this-&amp;gt;Count();
                if (task_count &amp;lt;= m_iNum)
                {
                    pthread_mutex_lock(&amp;amp;m_mapmutex);
                    Create();
                    pthread_mutex_unlock(&amp;amp;m_mapmutex);
                }
                if (m_iUsed &amp;gt; 0)
                    if (task_count)
                    {
                        if (task_count &amp;gt; m_iUsed)
                            in_count_del++;
                        if (in_count_del &amp;gt; 10)
                            change = true;
                    }
                if (task_count != 0)
                    usleep(second);

                if (is_clear)
                    break;
            }
            return 0;
        }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;};&lt;/p&gt;
&lt;p&gt;#endif
{% endcodeblock %}&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;测试文件代码：&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
{% codeblock lang:cpp %}
#include &amp;lt;stdio.h&amp;gt;
#include &amp;ldquo;Pool.h&amp;rdquo;
#include &amp;ldquo;TaskQueue.h&amp;rdquo;
#include &amp;ldquo;DBDatabase.h&amp;rdquo;
#include &amp;ldquo;DBStatement.h&amp;rdquo;&lt;/p&gt;
&lt;p&gt;using namespace POOL;&lt;/p&gt;
&lt;p&gt;using namespace QUEUE;
class B
{
public:
B(){printf(&amp;ldquo;B\n&amp;rdquo;);}
virtual int process(void* arg){return 0;};
virtual ~B(){printf(&amp;ldquo;B\n&amp;rdquo;);}
};
class A : public B
{
public:
A(){}
~A(){}
int process(void* arg)
{
char** argv = (char**)arg;
for (int iLoop = 0; iLoop &amp;lt; 2; iLoop++)
{
printf(&amp;quot;%s &amp;ldquo;, argv[iLoop]);
}
printf(&amp;quot;\n&amp;rdquo;);
return 0;
}
};&lt;/p&gt;
&lt;p&gt;int main(int argc, char** argv)
{
CThreadPool threadpool(2, task_priority_queue);
char conn[3][20] = {&amp;ldquo;system&amp;rdquo;, &amp;ldquo;system&amp;rdquo;, &amp;ldquo;tsdc&amp;rdquo;};
char &lt;em&gt;value[3];
value[0] = conn[0];
value[1] = conn[1];
value[2] = conn[2];
CConnectPool&lt;!-- raw HTML omitted --&gt; connnectpool(5);
connnectpool.SetFunc(&amp;amp;CDBDatabase::Connect, &amp;amp;CDBDatabase::Disconnect, value);
int count = 0;
A p;
CTaskQueue&amp;lt;CConnectPool&lt;!-- raw HTML omitted --&gt; &amp;gt;&lt;/em&gt; atask = new CTaskQueue&amp;lt;CConnectPool&lt;!-- raw HTML omitted --&gt; &amp;gt;;
char se[10] = &amp;ldquo;10000000&amp;rdquo;;
char &lt;em&gt;s[2];
s[0] = se;
s[1] = NULL;
atask-&amp;gt;SetFunc(Highest, &amp;amp;connnectpool, &amp;amp;CConnectPool&lt;!-- raw HTML omitted --&gt;::ControlThread, s);
task_priority_queue.push(atask);
CDBDatabase &lt;em&gt;temp = connnectpool.GetConnection();
CDBDatabase &lt;em&gt;temp2 = connnectpool.GetConnection();
CDBStatement&lt;/em&gt; dbstatement = new CDBStatement(temp);
CDBStatement&lt;/em&gt; dbs = new CDBStatement(temp2);
dbstatement-&amp;gt;Prepare(&amp;ldquo;select city_code from bb_device_rent_info_t where user_id = 48303537&amp;rdquo;);
dbs-&amp;gt;Prepare(&amp;ldquo;select user_id from bb_device_rent_info_t where user_id = 48303537&amp;rdquo;);
dbstatement-&amp;gt;Open();
dbs-&amp;gt;Open();
if (dbstatement-&amp;gt;Next() &amp;amp;&amp;amp; dbs-&amp;gt;Next())
{
printf(&amp;quot;%s\n&amp;quot;, dbstatement-&amp;gt;Field(0).AsString());
printf(&amp;quot;%s\n&amp;quot;, dbs-&amp;gt;Field(0).AsString());
}
connnectpool.BackConnection(temp);
connnectpool.BackConnection(temp2);
while(1)
{
char time[2][10];
char &lt;em&gt;ttt[3];
sprintf(time[0], &amp;ldquo;time:&amp;rdquo;);
sprintf(time[1], &amp;ldquo;%d&amp;rdquo;, count++);
ttt[0] = time[0];
ttt[1] = time[1];
ttt[2] = NULL;
CTaskQueue&lt;!-- raw HTML omitted --&gt;&lt;/em&gt; task = new CTaskQueue&lt;!-- raw HTML omitted --&gt;;
task-&amp;gt;SetFunc(Low, &amp;amp;p, &amp;amp;A::process, (void&lt;/em&gt;)ttt);
task_priority_queue.push(task);
usleep(1000000);
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A a;
CTaskQueue&amp;lt;A&amp;gt;* task = new CTaskQueue&amp;lt;A&amp;gt;;
char aaa[2][10] = {&amp;quot;aaa&amp;quot;, &amp;quot;bbb&amp;quot;};
char *aa[3];
char *bb[3];
aa[0] = aaa[0];
aa[1] = aaa[1];
aa[2] = NULL;
task-&amp;gt;SetFunc(Low, &amp;amp;a, &amp;amp;A::process, (void*)aa);
task_priority_queue.push(task);
char bbb[2][10] = {&amp;quot;ccc&amp;quot;, &amp;quot;bbb&amp;quot;};
bb[0] = bbb[0];
bb[1] = bbb[1];
bb[2] = NULL;
task = new CTaskQueue&amp;lt;A&amp;gt;;
task-&amp;gt;SetFunc(Minimum, &amp;amp;a, &amp;amp;A::process, (void*)bb);
//task_priority_queue.push(task);

connnectpool.Clear();
usleep(30000);
threadpool.Clear();

return 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}
{% endcodeblock %}
github: &lt;a class=&#34;link&#34; href=&#34;https://github.com/sohunjug/queue_thread-connection_pool.git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitLink&amp;hellip;.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可能还有bug,还有很多不足，欢迎大家帮忙测试.&lt;/p&gt;</description>
        </item>
        <item>
        <title>MongoDB与OracleDB效率测试</title>
        <link>https://sohunjug.com/2013/08/26/mongodb%E4%B8%8Eoracledb%E6%95%88%E7%8E%87%E6%B5%8B%E8%AF%95/</link>
        <pubDate>Mon, 26 Aug 2013 00:00:00 +0800</pubDate>
        
        <guid>https://sohunjug.com/2013/08/26/mongodb%E4%B8%8Eoracledb%E6%95%88%E7%8E%87%E6%B5%8B%E8%AF%95/</guid>
        <description>&lt;p&gt;最近因为任务需要，专门调研了一下MongoDB数据库的效率。与常规的OracleDB做了一下对比。&lt;/p&gt;
&lt;p&gt;MongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。
他支持的数据结构非常松散，是类似json的bjson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。
Mongodb的存储方式是文档式存储，并不是Key-Value形式。
Mongodb的主要的三种集群方式的搭建：Replica Set、 Sharding、 Master-Slaver。
其他大部分内容互联网上也有很多，我也就不再做介绍了。&lt;/p&gt;
&lt;p&gt;主要测试时设备环境以及数据格式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设备环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;175、176服务器：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;CPU：8核&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;内存：32G（空闲19G）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;硬盘：4TB&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;系统：Red Hat 6.3&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;网络：千兆光纤&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;165数据库服务器：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;CPU：8核&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;内存：16G&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;硬盘：2TB&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;系统：Red Hat 4&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;网络：百兆光纤&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据格式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每条数据包含6个字段。
字段名为:usr, pwd, age, email, address, phone
每个字段均为整形，每个字段内容为当前条数，如：第100条数据，每个字段内容为100。&lt;/p&gt;
&lt;p&gt;一、oracle数据库入库测试&lt;/p&gt;
&lt;p&gt;数据库环境:165数据库，表结构：hash分区16个，usr字段唯一索引&lt;/p&gt;
&lt;p&gt;入库条数：10,000,000&lt;/p&gt;
&lt;p&gt;1 单条数据入库&lt;/p&gt;
&lt;p&gt;总入库时间2836s（不包含创建连接以及句柄时间）约47.3分钟。&lt;/p&gt;
&lt;p&gt;2 批量数据入库&lt;/p&gt;
&lt;p&gt;2.1 每批次数据量50,000&lt;/p&gt;
&lt;p&gt;总入库时间564s，约9.4分钟。&lt;/p&gt;
&lt;p&gt;2.2 每批次数据量100,000&lt;/p&gt;
&lt;p&gt;总入库时间553s，约9.2分钟。&lt;/p&gt;
&lt;p&gt;二、mongodb入库测试&lt;/p&gt;
&lt;p&gt;1 主从备份数据库配置(主从复制)（Master-Slaver）&lt;/p&gt;
&lt;p&gt;比较初级的构架，配置简单。&lt;/p&gt;
&lt;p&gt;1.1 数据库环境（无索引）&lt;/p&gt;
&lt;p&gt;数据库环境：176主节点，175为备份节点，内容时时同步。无索引（索引可以在查询之前建立）。&lt;/p&gt;
&lt;p&gt;1.1.1 入库数据量10,000,000&lt;/p&gt;
&lt;p&gt;总入库时间355s，约5.9分钟。&lt;/p&gt;
&lt;p&gt;从头遍历一次时间13s。&lt;/p&gt;
&lt;p&gt;1.1.2 入库数据量50,000,000&lt;/p&gt;
&lt;p&gt;总入库时间1815s，约30.25分钟&lt;/p&gt;
&lt;p&gt;从头遍历一次时间58s&lt;/p&gt;
&lt;p&gt;注：推荐每次插入前删除索引，插入后重新建立索引，减少插入数据时对索引的处理时间。&lt;/p&gt;
&lt;p&gt;1.2 数据库环境（有索引）&lt;/p&gt;
&lt;p&gt;数据库环境：176主节点，175为备份节点，内容时时同步。usr字段索引。先建立索引&lt;/p&gt;
&lt;p&gt;1.2.1 入库数据量10,000,000&lt;/p&gt;
&lt;p&gt;总入库时间418s，约6.97分钟。&lt;/p&gt;
&lt;p&gt;从头遍历一次时间11s。&lt;/p&gt;
&lt;p&gt;1.2.2 入库数据量50,000,000（放弃）&lt;/p&gt;
&lt;p&gt;入库25,000,000数据大概1小时，后续时间持续增长，速度过慢。&lt;/p&gt;
&lt;p&gt;注：网上资料提供说：这种先写后读的需求，完全可以等全部插入后再建索引，防止大量的锁竞争。&lt;/p&gt;
&lt;p&gt;2 mongodb高可用性架构—Replica Set (副本集)&lt;/p&gt;
&lt;p&gt;2.1 数据库环境&lt;/p&gt;
&lt;p&gt;数据库环境：主节点10.4.120.176:27017，从节点10.4.120.175:27017，仲裁节点10.4.120.176:17017。&lt;/p&gt;
&lt;p&gt;作用：当主节点宕机或停电，从节点与仲裁节点进行投票，选择票数大于总主机数一半的从主机为新的主节点。保证服务正常运转。&lt;/p&gt;
&lt;p&gt;2.1.1 入库数据量50,000,000(无索引)&lt;/p&gt;
&lt;p&gt;总入库时间2348s，约39.5分钟。&lt;/p&gt;
&lt;p&gt;从头遍历一次时间58s。&lt;/p&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;p&gt;1.大部分网络上的构架应该是这种的升级版（主要为后期数据库调优）。&lt;/p&gt;
&lt;p&gt;2.入库后新建索引大概时间为5分钟。&lt;/p&gt;
&lt;p&gt;3 MongoDB分布式主备集群架构&lt;/p&gt;
&lt;p&gt;本架构为2章节介绍中1和2架构的结合&lt;/p&gt;
&lt;p&gt;集群子集r0主备：主服务器176:10000，备服务器175:20000，仲裁服务器176:10001。&lt;/p&gt;
&lt;p&gt;集群子集r1主备：主服务器175:10000，备服务器176:20000，仲裁服务器175:10001。&lt;/p&gt;
&lt;p&gt;将r0，r1子集架构为分布式集群，自动分片。&lt;/p&gt;
&lt;p&gt;3.1.1 入库数据量10,000,000&lt;/p&gt;
&lt;p&gt;总入库时间618s，约10.3分钟。&lt;/p&gt;
&lt;p&gt;从头遍历一次时间34s。&lt;/p&gt;
&lt;p&gt;本次测试包含：插入过程中将某个子集主节点kill掉模拟服务器故障，过1分钟后重新启动该节点主服务器进程，持续插入进程继续，当最后插入结束时，数据丢失1条。&lt;/p&gt;
&lt;p&gt;3.1.2 入库数据量20,000,000&lt;/p&gt;
&lt;p&gt;多进程入库，每个进程入库10,000,000&lt;/p&gt;
&lt;p&gt;总入库时间1315s，约21.9分钟。&lt;/p&gt;
&lt;p&gt;3.1.3 入库数据量50,000,000&lt;/p&gt;
&lt;p&gt;总入库时间2771s，约46.2分钟。&lt;/p&gt;
&lt;p&gt;从头遍历一次时间160s。&lt;/p&gt;
&lt;p&gt;三、总结&lt;/p&gt;
&lt;p&gt;通过下方的表格可以看出，当处理数据多时，MongoDB效率基本不会改变，而OracleDB效率慢的地方是执行sql语句的时间，当某些业务需求必须单独执行sql时，MongoDB的效率约为OracleDB的5倍。&lt;/p&gt;
&lt;p&gt;其中商业架构主推分布式主备集群的架构方式，此方式可以实现数据时时备份，且数据分布式存储，可以实现当某一台主机宕机，无需暂停业务处理。数据丢失情况，为宕机前100ms内执行的数据，约为数据的千万分之一。&lt;/p&gt;
&lt;p&gt;个人认为MongoDB单机的效率虽然非常高，但可用性低，而分布式架构适合数据重要性不强情况，能实现远超oracle的效率，分布式主备架构是可用性、安全性最高的架构方式，前期的效率可能会等同于oracle，但当数据量过大时，会超过oracle效率。实现水平扩展，将计算能力提升到最大。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;</description>
        </item>
        <item>
        <title>MacBook Pro – Fan Control</title>
        <link>https://sohunjug.com/2013/07/26/macbook-pro-fan-control/</link>
        <pubDate>Fri, 26 Jul 2013 00:00:00 +0800</pubDate>
        
        <guid>https://sohunjug.com/2013/07/26/macbook-pro-fan-control/</guid>
        <description>&lt;p&gt;这篇文章主要介绍了在Mac OS X 10.8.4、Ubuntu 13.04 x64和Windows 7 x64三个系统平台下对MacBook Pro（以下简称：MBP）的风扇控制，因为不知道为什么的原因，我个人和不少人的MBP都表现出风扇调速迟钝的问题，通常都是2000RPM左右，然后等到机器超过90摄氏度后风扇开始提速到6000RPM进行散热，但这个肯定不是我们需要的效果，我们要的是，要么自己控制，要么自动调整。&lt;/p&gt;
&lt;p&gt;目前，本人的电脑装的是三系统共存，就是Mac OS X 10.8.4、Ubuntu 13.04 x64和Windows 7 x64&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;hr&gt;
&lt;p&gt;这个身为MBP原生的，与硬件契合度最高的系统同样存在风扇自动调整的问题，至少在我重置了N次SMC的情况依然还是只能达到90度附近才会提速，于是只能用软件来对付了，我个人觉得效果比较好的是Fan Control。&lt;/p&gt;
&lt;p&gt;名称：Fan Control&lt;/p&gt;
&lt;p&gt;下载：&lt;a class=&#34;link&#34; href=&#34;http://www.lobotomo.com/products/FanControl/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.lobotomo.com/products/FanControl/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装之后，会在“系统偏好设置”里面增加一个叫“Fan Control”的设置面板。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sohunjug.com/img/blog/1.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Mac FanControl&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;进去之后三项设置，&lt;/p&gt;
&lt;p&gt;Base Speed，初始速度，系统默认是2000RPM，系统启动之后会以这个初始速度为基准；&lt;/p&gt;
&lt;p&gt;Lower Threshold，温度下限阀值，这个是配合Base Speed工作的，在这个温度下，转速是Base Speed；&lt;/p&gt;
&lt;p&gt;Upper Threshold，温度上限阀值，这个是值达到时系统将以最高转速跑风扇，我的MBP 13是6200。&lt;/p&gt;
&lt;p&gt;风扇的转速会自动在Lower和Upper之间自动调整。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;!-- raw HTML omitted --&gt;Ubuntu 13.04 x64&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;遇到Linux有个好处，直接修改配置文件就行，可以省掉软件了，但是这个没法进行曲线调速了，所以有的人是直接把速度一步到位直接上到5500RPM，喜欢6000RPM的也行，反正风扇的作用就是处理积热嘛~&lt;/p&gt;
&lt;p&gt;不过我个人只是上班使用linux，所以我设置3800就完全够用了，一点不热，感觉灰常好啊~&lt;/p&gt;
&lt;p&gt;操作如下：&lt;/p&gt;
&lt;p&gt;开启终端（Terminal），输入以下指令，之后需要输入你当前用户的密码，然后回车，
{% codeblock lang:bash %}
sudo sh -c &amp;ldquo;echo 5000 &amp;gt; /sys/devices/platform/applesmc.768/fan1_min&amp;rdquo;
{% endcodeblock %}&lt;/p&gt;
&lt;p&gt;通过修改fan1_min中的数字“1”，可以调整各个不同风扇的转速，因为MBP 13只有一个风扇，所以也只有fan1，像MBP 15这一类的，可以分别调整fan1和fan2的转速等。并且每次开机的话系统都会自动重置，所以如果需要每次开机都保持一个转速的话，可以自行修改rc脚本。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;!-- raw HTML omitted --&gt;Windows 7 x64&lt;!-- raw HTML omitted --&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在Windows下也是需要依靠第三方软件的，据说是有类似于OSX下Fan Control那样的自动调速软件，不过我个人还是比较喜欢把速度调整到4000左右，基本也就够用了。软件叫“Mac/SMC Fan Control for Windows (+ Temp) ”。&lt;/p&gt;
&lt;p&gt;名称：Mac/SMC Fan Control for Windows (+ Temp)&lt;/p&gt;
&lt;p&gt;平台：32-bit MS Windows (NT/2000/XP/7/8/8.1), 64-bit MS Windows 7/8/8.1, Vista, WinXP.&lt;/p&gt;
&lt;p&gt;下载：&lt;a class=&#34;link&#34; href=&#34;http://sourceforge.net/projects/macfan/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://sourceforge.net/projects/macfan/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方没有提到Win7，但是我的Win7-64bit也没有问题的。这是一个基于CLI（CommandLine Interface，命令行界面）的程序，而且同时还需要管理员权限，还要带参数，使用起来稍微有点麻烦，我个人是这么处理的：&lt;/p&gt;
&lt;p&gt;1.首先将解压缩后的文件放在\windows\mf目录；&lt;/p&gt;
&lt;p&gt;2.同时在目录里面增加一个批处理文件mf.cmd，内容如下：
{% codeblock lang:bat %}
@echo off
@echo Input the fan speed (2000-6200):
set /p speed=
C:\Windows\mf\MacFanx64.exe %speed%
{% endcodeblock %}
3.之后按住Alt键，把mf.cmd拖到桌面上，之后在mf.cmd上右键，选择“属性”，选择“快捷方式”页面，点击“高级”，之后把“以管理员权限运行”勾上。&lt;/p&gt;
&lt;p&gt;4.双击桌面上的“mf.cmd – 快捷方式”，之后输入你想要调整的风扇转速，回车即可。&lt;/p&gt;
&lt;p&gt;因为我的是MBP 13，只有一个风扇，所以只需要提供一个参数，如果有多个风扇的话，请依据自己的需要进行修改，按照&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;基本上，我现在三系统使用的很完美，win7只是下个电影或者游戏下，平时上班linux，下班mac~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;引用参考：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fan Control: &lt;a class=&#34;link&#34; href=&#34;http://www.lobotomo.com/products/FanControl/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.lobotomo.com/products/FanControl/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MacFan: &lt;a class=&#34;link&#34; href=&#34;http://sourceforge.net/projects/macfan/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://sourceforge.net/projects/macfan/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ubuntu Forum: http://ub&lt;a class=&#34;link&#34; href=&#34;http://ubuntuforums.org/showthread.php?t=1378663&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;untuforums.org/showthread.php?t=1378663&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>简单的内存管理类（关于malloc与free）</title>
        <link>https://sohunjug.com/2013/06/26/%E7%AE%80%E5%8D%95%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%B1%BB%E5%85%B3%E4%BA%8Emalloc%E4%B8%8Efree/</link>
        <pubDate>Wed, 26 Jun 2013 00:00:00 +0800</pubDate>
        
        <guid>https://sohunjug.com/2013/06/26/%E7%AE%80%E5%8D%95%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%B1%BB%E5%85%B3%E4%BA%8Emalloc%E4%B8%8Efree/</guid>
        <description>&lt;p&gt;大家在写代码的时候是否有忘记free指针的时候呢？&lt;/p&gt;
&lt;p&gt;如果是大型项目肯定会用一些比较稳定的开源库一类的来解决。而如果是私人的小项目，或者是测试一类的代码遇到这类问题还需要各种检查，是否很浪费时间呢？&lt;/p&gt;
&lt;p&gt;给大家分享一个我个人使用的内存管理类哈~可以使用Create一块空间，之后可以不需要去管这块空间最后是否free掉，因为类析构时候会自动帮助free掉，而如果想要手动free也支持，直接传入申请空间时候取得的ID就可以指定析构了。这个还是比较适合私人用用哈~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首先是头文件~&lt;/strong&gt;
{% codeblock lang:cpp %}/*******************************************************************************&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Author : RKhuwq&lt;/li&gt;
&lt;li&gt;Email : &lt;a class=&#34;link&#34; href=&#34;mailto:huwq@neusoft.com&#34; &gt;huwq@neusoft.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Last modified : 2013-04-07 18:34&lt;/li&gt;
&lt;li&gt;Filename : MemCtrl.h&lt;/li&gt;
&lt;li&gt;Description : 内存管理类，类析构时自动释放内存。&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;          用于给指针申请内存空间。
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;*****************************************************************************/
#ifndef &lt;strong&gt;MEMCTRL_H&lt;/strong&gt;
#define &lt;strong&gt;MEMCTRL_H&lt;/strong&gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &lt;!-- raw HTML omitted --&gt;
#include &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;class CMemCtrl
{
private:
typedef struct &lt;em&gt;DATA_SPACE&lt;/em&gt;
{
void* point;
&lt;em&gt;DATA_SPACE&lt;/em&gt;* Next;
&lt;em&gt;DATA_SPACE&lt;/em&gt;* Pre;
int count;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        _DATA_SPACE_()
        {
            point = NULL;
            Next = NULL;
            Pre = NULL;
            count = 0;
        }
        ~_DATA_SPACE_()
        {
            if (point != NULL)
                free(point);
            if (Pre != NULL &amp;amp;&amp;amp; Next == NULL)
                Pre-&amp;gt;Next = NULL;
            else if (Pre == NULL &amp;amp;&amp;amp; Next != NULL)
                Next-&amp;gt;Pre = NULL;
            else if (Pre != NULL &amp;amp;&amp;amp; Next != NULL)
            {
                Pre-&amp;gt;Next = Next;
                Next-&amp;gt;Pre = Pre;
            }
        }
        void SetPre(_DATA_SPACE_* Pre)
        {
            this-&amp;gt;Pre = Pre;
        }
    }KDataSpace;

    typedef KDataSpace* PDataSpace;
public:
    CMemCtrl();
    ~CMemCtrl();

    //申请空间
    void* Create(int x, int size);
    //指定ID释放空间
    void Clear(int count);
    //释放所有已申请空间
    bool Reset();
    //取得最近一次所申请的空间ID
    int GetCount();
private:
    void Clear();
    void* point_one;
    std::vector&amp;lt;int&amp;gt; vCount;
    PDataSpace header;
    PDataSpace end;
    PDataSpace point;
    int count_one;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;};&lt;/p&gt;
&lt;p&gt;#endif
{% endcodeblock %}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面就是具体的实现了~&lt;/strong&gt;
{% codeblock lang:cpp %}
/*******************************************************************************&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Author : RKhuwq&lt;/li&gt;
&lt;li&gt;Email : &lt;a class=&#34;link&#34; href=&#34;mailto:huwq@neusoft.com&#34; &gt;huwq@neusoft.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Last modified : 2013-04-07 18:34&lt;/li&gt;
&lt;li&gt;Filename : MemCtrl.h&lt;/li&gt;
&lt;li&gt;Description : 内存管理类，类析构时自动释放内存。&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;          用于给指针申请内存空间。
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;*****************************************************************************/
#include &amp;ldquo;MemCtrl.h&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CMemCtrl::CMemCtrl()
{
header = NULL;
end = NULL;
count_one = 0;
}&lt;/p&gt;
&lt;p&gt;CMemCtrl::~CMemCtrl()
{
Clear();
}&lt;/p&gt;
&lt;p&gt;void CMemCtrl::Clear()
{
while(header != NULL)
{
point = header-&amp;gt;Next;
delete header;
header = point;
}
header = NULL;
end = NULL;
count_one = 0;
}&lt;/p&gt;
&lt;p&gt;void CMemCtrl::Clear(int count)
{
PDataSpace temp;
temp = end;
point = temp;
while(point != NULL &amp;amp;&amp;amp; point-&amp;gt;count != count)
{
point = temp-&amp;gt;Pre;
temp = point;
}
vCount.push_back(point-&amp;gt;count);
if (point == header)
header = header-&amp;gt;Next;
if (point == end)
end = end-&amp;gt;Pre;
if (point != NULL)
{
delete point;
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;point = NULL;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;int CMemCtrl::GetCount()
{
return end-&amp;gt;count;
}&lt;/p&gt;
&lt;p&gt;void* CMemCtrl::Create(int x, int size)
{
std::vector&lt;!-- raw HTML omitted --&gt;::iterator vCountIte;
point_one = NULL;
point_one = (void*)calloc(x, size);
if (point_one == NULL)
return NULL;
point = new KDataSpace();
if (point == NULL)
return NULL;
point-&amp;gt;point = point_one;
while ((vCountIte = find(vCount.begin(), vCount.end(), count_one-1)) != vCount.end())
{
count_one&amp;ndash;;
vCount.erase(vCountIte);
}
if (vCount.size() &amp;gt; 0)
{
point-&amp;gt;count = vCount[0];
vCount.erase(vCount.begin());
}
else
{
point-&amp;gt;count = count_one;
count_one ++;
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (header == NULL)
{
    header = point;
    end = point;
}
else
{
    end-&amp;gt;Next = point;
    point-&amp;gt;SetPre(end);
    end = point;
}

return point_one;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;bool CMemCtrl::Reset()
{
Clear();
return true;
}
{% endcodeblock %}&lt;/p&gt;</description>
        </item>
        <item>
        <title>关于makefile的通用方案（个人测试推荐方案）</title>
        <link>https://sohunjug.com/2013/06/23/%E5%85%B3%E4%BA%8Emakefile%E7%9A%84%E9%80%9A%E7%94%A8%E6%96%B9%E6%A1%88%E4%B8%AA%E4%BA%BA%E6%B5%8B%E8%AF%95%E6%8E%A8%E8%8D%90%E6%96%B9%E6%A1%88/</link>
        <pubDate>Sun, 23 Jun 2013 00:00:00 +0800</pubDate>
        
        <guid>https://sohunjug.com/2013/06/23/%E5%85%B3%E4%BA%8Emakefile%E7%9A%84%E9%80%9A%E7%94%A8%E6%96%B9%E6%A1%88%E4%B8%AA%E4%BA%BA%E6%B5%8B%E8%AF%95%E6%8E%A8%E8%8D%90%E6%96%B9%E6%A1%88/</guid>
        <description>&lt;p&gt;在使用linux或者mac时，有时大家会写一些自己测试功能一类的小程序，可是如果只有1个文件时候还可以，直接gcc就OK了。&lt;/p&gt;
&lt;p&gt;而一旦文件多了以后可能就会很麻烦。这个makefile可以作为一个解决方案。&lt;/p&gt;
&lt;p&gt;首先自己修改需要生成的程序文件名的获取脚本，我是测试这类的小程序都在一个文件夹下分不同的子文件夹，所以在子文件夹外加入这个文件FileName.sh，不要忘记执行权限哦。（其中的awk自行更改哦，我的路径是/Users/sohunjug/Documents/sohunjug/）
{% codeblock lang:bash %}
FileName=`pwd | awk -Fsohunjug &amp;lsquo;{print $3}&amp;rsquo; | awk -F/ &amp;lsquo;{print $2}&amp;rsquo;`
echo &amp;ldquo;$FileName&amp;rdquo;
{% endcodeblock %}&lt;/p&gt;
&lt;p&gt;之后就可以将makefile考入需要的路径，然后执行make，就会生成以子文件夹名来命名的程序了～&lt;/p&gt;
&lt;p&gt;{% codeblock lang:makefile %}&lt;/p&gt;
&lt;h1 id=&#34;gcc编译通用的makefile文件&#34;&gt;gcc编译通用的Makefile文件&lt;/h1&gt;
&lt;p&gt;#######################################################
FileName=`../FileName.sh`
Exe=$(FileName)
CC = g++
CFLAGS = -Wall -g&lt;/p&gt;
&lt;p&gt;OBJ_PATH = objs
LINKFLAGS = -ldl -lpthread&lt;/p&gt;
&lt;p&gt;#Cpp文件夹
SRCDIR = .&lt;/p&gt;
&lt;p&gt;CPP_SRCDIR = $(SRCDIR)
CPP_SOURCES = $(foreach d,$(CPP_SRCDIR),$(wildcard $(d)/*.cpp) )
CPP_OBJS = $(patsubst %.cpp, $(OBJ_PATH)/%.o, $(CPP_SOURCES))&lt;/p&gt;
&lt;p&gt;default: test init compile&lt;/p&gt;
&lt;p&gt;$(C_OBJS):$(OBJ_PATH)/%.o:%.c
$(CC) -c $(CFLAGS) &amp;lt; -o $@&lt;/p&gt;
&lt;p&gt;$(CPP_OBJS):$(OBJ_PATH)/%.o:%.cpp
$(CC) -c $(CFLAGS) &amp;lt; -o $@&lt;/p&gt;
&lt;p&gt;test:
@echo &amp;ldquo;$(FileName)&amp;rdquo;
@echo &amp;ldquo;CPP_SOURCES: $(CPP_SOURCES)&amp;rdquo;
@echo &amp;ldquo;CPP_OBJS: $(CPP_OBJS)&amp;rdquo;&lt;/p&gt;
&lt;p&gt;init:
$(foreach d,$(SRCDIR), mkdir -p $(OBJ_PATH)/$(d);)&lt;/p&gt;
&lt;p&gt;compile:$(C_OBJS) $(CPP_OBJS)
$(CC)  $^ -o $(Exe)  $(LINKFLAGS) $(LIBS)&lt;/p&gt;
&lt;p&gt;clean:
rm -rf $(OBJ_PATH)
rm -f $(Exe)
########################################################
{% endcodeblock %}&lt;/p&gt;</description>
        </item>
        <item>
        <title>关于脏数据、脏数据块的正确定义，commit的内部机制</title>
        <link>https://sohunjug.com/2012/12/24/%E5%85%B3%E4%BA%8E%E8%84%8F%E6%95%B0%E6%8D%AE%E8%84%8F%E6%95%B0%E6%8D%AE%E5%9D%97%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%AE%9A%E4%B9%89commit%E7%9A%84%E5%86%85%E9%83%A8%E6%9C%BA%E5%88%B6/</link>
        <pubDate>Mon, 24 Dec 2012 00:00:00 +0800</pubDate>
        
        <guid>https://sohunjug.com/2012/12/24/%E5%85%B3%E4%BA%8E%E8%84%8F%E6%95%B0%E6%8D%AE%E8%84%8F%E6%95%B0%E6%8D%AE%E5%9D%97%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%AE%9A%E4%B9%89commit%E7%9A%84%E5%86%85%E9%83%A8%E6%9C%BA%E5%88%B6/</guid>
        <description>&lt;p&gt;有人觉得脏数据是指错误的业务流程在系统中产生的无用异常数据。  产生这种数据的原因可能是因为错误的业务流程或者手动在数据库中制造。&lt;/p&gt;
&lt;p&gt;例如在百度百科中，对脏数据的定义是这样的，“脏数据是指源系统中的数据不在给定的范围内或对于实际业务毫无意义，或是数据格式非法，以及在源系统中存在不规范的编码和含糊的业务逻辑”。&lt;/p&gt;
&lt;p&gt;无论这种定义是否正确，在oracle中脏数据的定义不是这样的。在oracle中，脏数据是指在内存中而未写入硬盘的数据。脏数据块即为在内存中而未写入硬盘的数据块。&lt;/p&gt;
&lt;p&gt;那到底执行了commit语句之后，数据是否就立刻写到硬盘上了哪？事实上不是这样的，因为I/O操作是非常昂贵的，每次commit都写入硬盘会对系统造成巨大的压力。&lt;/p&gt;
&lt;p&gt;将内存数据块写入硬盘是一个相当复杂的过程。简单的说DBWn进程会&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;定期&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;将内存数据块写入硬盘，由CKPT后台进程确定写入的时间间隔。但是为了保证安全性，将由LGWR进程将redo日志写入联机日志，以备数据库实例崩溃时，恢复未写入硬盘的数据。&lt;/p&gt;
&lt;p&gt;DBWn：database writer&amp;mdash;&amp;gt; &lt;em&gt;DBW n&lt;/em&gt;是数字,代表unix下多个数据库写进程。&lt;/p&gt;
&lt;p&gt;LGWR：Log Writer 将日志缓冲区中的所有记录项写到日志文件中。该进程在启动实例时自动启动。&lt;/p&gt;
&lt;p&gt;CKPT： 检验点进程。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Linux脚本</title>
        <link>https://sohunjug.com/2012/12/23/linux%E8%84%9A%E6%9C%AC/</link>
        <pubDate>Sun, 23 Dec 2012 00:00:00 +0800</pubDate>
        
        <guid>https://sohunjug.com/2012/12/23/linux%E8%84%9A%E6%9C%AC/</guid>
        <description>&lt;p&gt;Linux下开发人员时间长了会使用各种脚本，来增加开发效率，分享一个本人常使用的自动登录脚本。&lt;/p&gt;
&lt;p&gt;首先需要安装插件
{% codeblock lang:bash %}
ubuntu       apt-get install expect
fedora       yum install expect.x86_64
opensuse     zypper install expect
{% endcodeblock %}
之后就可以这么写脚本了，需要传参数 IP、用户名、密码、服务器的语言类型，可以使用locale命令查看。&lt;/p&gt;
&lt;p&gt;{% codeblock lang:bash%}
#!/usr/bin/expect -f&lt;/p&gt;
&lt;p&gt;set user [lindex $argv 1]
set host [lindex $argv 0]
set password [lindex $argv 2]
set lang [lindex $argv 3]
set timeout -1&lt;/p&gt;
&lt;p&gt;spawn ssh $user@$host&lt;/p&gt;
&lt;p&gt;expect {
&amp;ldquo;&lt;em&gt;yes/no&lt;/em&gt;&amp;rdquo; { send &amp;ldquo;yes\r&amp;rdquo;;exp_continue }&lt;/p&gt;
&lt;p&gt;&amp;ldquo;&lt;em&gt;assword:&lt;/em&gt;&amp;rdquo; { send &amp;ldquo;$password\r&amp;rdquo; }&lt;/p&gt;
&lt;p&gt;}
sleep 1
#send &amp;ldquo;export LANG=$lang &amp;amp;&amp;amp; export LC_ALL=$lang \r&amp;rdquo;&lt;/p&gt;
&lt;p&gt;interact
{% endcodeblock %}
而登录的时候可以将密码等信息存入文件中，然后自动读取。如：
{% codeblock lang:bash %}
#!/bin/bash&lt;/p&gt;
&lt;p&gt;if [ -f $HOME/Documents/ssh/conn.profile ]; then
source $HOME/Documents/ssh/conn.profile
fi&lt;/p&gt;
&lt;p&gt;ip=$1
CONIP=&lt;code&gt;cat $HOME/Documents/ssh/conn.profile | grep CONNIP$ip | grep -v grep | awk -F= &#39;{print \$2}&#39;&lt;/code&gt;
CONUSER=&lt;code&gt;cat $HOME/Documents/ssh/conn.profile | grep CONNUSER$ip | grep -v grep | awk -F= &#39;{print \$2}&#39;&lt;/code&gt;
CONPASS=&lt;code&gt;cat $HOME/Documents/ssh/conn.profile | grep CONNPASS$ip | grep -v grep | awk -F= &#39;{print \$2}&#39;&lt;/code&gt;
CONLANG=&lt;code&gt;cat $HOME/Documents/ssh/conn.profile | grep CONNLANG$ip | grep -v grep | awk -F= &#39;{print \$2}&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;if [ -z ${CONIP} ]
then
echo error:  没有那个IP
else
echo ${CONIP}
echo ${CONUSER}
echo ${CONPASS}
echo ${CONLANG}
export LANG=${CONLANG} &amp;amp;&amp;amp; export LC_ALL=${CONLANG}
$HOME/Documents/ssh/sshend.sh ${CONIP} ${CONUSER} ${CONPASS} ${CONLANG}
`qdbus org.kde.konsole $session org.kde.konsole.Session.setCodec UTF-8`
export LANG=zh_CN.UTF-8
export LC_ALL=zh_CN.UTF-8
fi
{% endcodeblock %}
给这个文件建立一个alias，之后直接登录加上标志，用ssh或者ftp等命令就方便了很多吧～&lt;/p&gt;</description>
        </item>
        <item>
        <title>没有进行commit操作的数据是否能被查询到，关于oracle的脏读和隔离级别</title>
        <link>https://sohunjug.com/2012/12/23/%E6%B2%A1%E6%9C%89%E8%BF%9B%E8%A1%8Ccommit%E6%93%8D%E4%BD%9C%E7%9A%84%E6%95%B0%E6%8D%AE%E6%98%AF%E5%90%A6%E8%83%BD%E8%A2%AB%E6%9F%A5%E8%AF%A2%E5%88%B0%E5%85%B3%E4%BA%8Eoracle%E7%9A%84%E8%84%8F%E8%AF%BB%E5%92%8C%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</link>
        <pubDate>Sun, 23 Dec 2012 00:00:00 +0800</pubDate>
        
        <guid>https://sohunjug.com/2012/12/23/%E6%B2%A1%E6%9C%89%E8%BF%9B%E8%A1%8Ccommit%E6%93%8D%E4%BD%9C%E7%9A%84%E6%95%B0%E6%8D%AE%E6%98%AF%E5%90%A6%E8%83%BD%E8%A2%AB%E6%9F%A5%E8%AF%A2%E5%88%B0%E5%85%B3%E4%BA%8Eoracle%E7%9A%84%E8%84%8F%E8%AF%BB%E5%92%8C%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</guid>
        <description>&lt;p&gt;以前在辽宁电信做数据转换的时候曾经问过别人一个问题，“修改的数据没有进行commit操作时，能否被其他用户查询到”，当时就被同事鄙视了，在大家眼里这个问题的结果是弱智和显而易见的，但是其实这是一个可以深入研究的问题。&lt;/p&gt;
&lt;h1 id=&#34;关于脏读&#34;&gt;关于脏读&lt;/h1&gt;
&lt;p&gt;&amp;ldquo;修改的数据没有进行commit，可以被其它用户查到”，这种场景即为“脏读(dirty read)&amp;quot;。&lt;/p&gt;
&lt;p&gt;脏读存在的意义是为了实现非阻塞读(高并发无等待)，但是Oracle可以完全得到脏读的所有好处（即无阻塞），而不会带来任何不正确的结果，所以oracle不支持脏读，但是sqlserver等一些数据库是支持脏读的。&lt;/p&gt;
&lt;p&gt;oracle是怎么实现这种机制的？当一条数据被修改而未进行commit时，当有其它用户查询这条数据时，oracle会绕过已修改的原数据，而是从undo段获得数据。因此可以返回一致而且正确的答案，而无需等待事务提交。&lt;/p&gt;
&lt;h1 id=&#34;关于隔离级别&#34;&gt;关于隔离级别&lt;/h1&gt;
&lt;p&gt;标准sql的隔离级别如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sohunjug.com/img/blog/oracle.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;级别&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;oracle提供了SQL92标准中的read committed和serializable，同时提供了非SQL92标准的read-only。由于oracle不支持read uncommited，所以oracle不支持脏读。oracle默认的的事务隔离级别为read commited。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;read uncommited的隔离级别最低， serializable的隔离级别最高。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;较低的隔离级别可以增强许多用户同时访问数据的能力，但也增加了用户可能遇到的并发副作用（例如脏读或丢失更新）的数量。相反，较高的隔离级别减少了用户可能遇到的并发副作用的类型，但需要更多的系统资源，并增加了一个事务阻塞其他事务的可能性。&lt;/p&gt;</description>
        </item>
        <item>
        <title>我的vim配置</title>
        <link>https://sohunjug.com/2012/12/22/%E6%88%91%E7%9A%84vim%E9%85%8D%E7%BD%AE/</link>
        <pubDate>Sat, 22 Dec 2012 00:00:00 +0800</pubDate>
        
        <guid>https://sohunjug.com/2012/12/22/%E6%88%91%E7%9A%84vim%E9%85%8D%E7%BD%AE/</guid>
        <description>&lt;p&gt;我用vimrc，其中配置了函数列表，目录列表，函数跳转，定义跳转，xml排版，自动关联cscope和tags，快捷注释。&lt;/p&gt;
&lt;p&gt;其中需要下载一些插件才能用，比如我用的fedora，需要下载的列表为
{% codeblock %}
vim-X11.x86_64
vim-common.x86_64
vim-enhanced.x86_64
vim-filesystem.x86_64
vim-halibut.noarch
vim-minimal.x86_64
vim-perl-support.noarch
cscope.x86_64
ctags.x86_64
{% endcodeblock %}
之后配置$HOME目录下的.vimrc&lt;/p&gt;
&lt;p&gt;{% codeblock lang:vim %}
if has(&amp;ldquo;cscope&amp;rdquo;)
set cscopequickfix=s-,c-,d-,i-,t-,e-
set csto=0
set cst
set csverb
endif&lt;/p&gt;
&lt;p&gt;&amp;ldquo;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
&amp;ldquo;获取当前路径的上一级的路径
function! GET_UP_PATH(dir)
let pos=strlen(a:dir)-1
while pos&amp;gt;0
if (a:dir[pos]==&amp;rdquo;/&amp;rdquo; )
return  strpart(a:dir,0,pos)
endif
let pos=pos-1
endwhile
return  &amp;quot;&amp;quot;
endfunction&lt;/p&gt;
&lt;p&gt;&amp;ldquo;设置相关tags
function! s:SET_TAGS()
let dir = getcwd() &amp;ldquo;获得源文件路径
&amp;ldquo;在路径上递归向上查找tags文件
while dir!=&amp;rdquo;&amp;rdquo;
if findfile(&amp;ldquo;tags&amp;rdquo;,dir ) !=&amp;rdquo;&amp;quot;
&amp;ldquo;找到了就加入到tags
exec &amp;ldquo;set tags+=&amp;quot;.dir.&amp;quot;/tags&amp;rdquo;
return
endif
&amp;ldquo;得到上级路径
let dir=GET_UP_PATH(dir)
endwhile
endfunction&lt;/p&gt;
&lt;p&gt;&amp;ldquo;设置php cscope.out
function! SET_CSPHP()
if(executable(&amp;lsquo;cscope&amp;rsquo;) &amp;amp;&amp;amp; has(&amp;ldquo;cscope&amp;rdquo;) )
silent! execute &amp;ldquo;!find . -name &amp;lsquo;&lt;em&gt;.php&amp;rsquo;  -o -name &amp;lsquo;&lt;/em&gt;.inc&amp;rsquo; -o -name &amp;lsquo;*.module&amp;rsquo; &amp;gt; cscope.files&amp;rdquo;
silent! execute &amp;ldquo;!cscope -bkq -i cscope.files&amp;rdquo;
if filereadable(&amp;ldquo;cscope.out&amp;rdquo;)
silent! execute &amp;ldquo;cs add cscope.out&amp;rdquo;
endif
silent! execute &amp;ldquo;!ctags -R &amp;ndash;langmap=php:.engine.inc.module.theme.php  &amp;ndash;php-kinds=cdf  &amp;ndash;languages=php &amp;quot;
endif
endfunction&lt;/p&gt;
&lt;p&gt;&amp;ldquo;设置c cscope.out
function! SET_CSAD()
if(executable(&amp;lsquo;cscope&amp;rsquo;) &amp;amp;&amp;amp; has(&amp;ldquo;cscope&amp;rdquo;) )
silent! execute &amp;ldquo;!find . -name &amp;lsquo;&lt;em&gt;.h&amp;rsquo; -o -name &amp;lsquo;&lt;/em&gt;.c&amp;rsquo; -o -name &amp;lsquo;*.cpp&amp;rsquo; &amp;gt; cscope.files&amp;rdquo;
silent! execute &amp;ldquo;!cscope -bkq -i cscope.files&amp;rdquo;
if filereadable(&amp;ldquo;cscope.out&amp;rdquo;)
silent! execute &amp;ldquo;cs add cscope.out&amp;rdquo;
endif
silent! execute &amp;ldquo;!ctags -R &amp;ndash;c-kinds=+p &amp;ndash;c++-kinds=+p &amp;ndash;fields=+iaS &amp;ndash;extra=+q .&amp;rdquo;
endif
endfunction&lt;/p&gt;
&lt;p&gt;function! s:SET_CSC()
let dir = expand(&amp;rdquo;%:p:h&amp;rdquo;) &amp;ldquo;获得源文件路径
&amp;ldquo;在路径上递归向上查找tags文件
while dir!=&amp;rdquo;&amp;rdquo;
if findfile(&amp;ldquo;cscope.out&amp;rdquo;,dir ) !=&amp;rdquo;&amp;rdquo;
&amp;ldquo;找到了就加入到tags
if 0 == cscope_connection(1, &amp;ldquo;cscope.out&amp;rdquo;, dir)
execute &amp;ldquo;cs add &amp;ldquo;.dir.&amp;quot;/cscope.out &amp;ldquo;.dir
endif
return
endif
&amp;ldquo;得到上级路径
let dir=GET_UP_PATH(dir)
endwhile
endfunction&lt;/p&gt;
&lt;p&gt;autocmd BufEnter * call s:SET_CSC()
autocmd BufEnter * call s:SET_TAGS()
&amp;ldquo;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
set laststatus=2            &amp;quot; 显示状态栏 (默认值为 1, 无法显示状态栏)&lt;/p&gt;
&lt;p&gt;nmap &lt;!-- raw HTML omitted --&gt; :bnext&lt;!-- raw HTML omitted --&gt;
nmap &lt;!-- raw HTML omitted --&gt; :bprevious&lt;!-- raw HTML omitted --&gt;
nmap &lt;!-- raw HTML omitted --&gt; :w!&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;nmap &lt;!-- raw HTML omitted --&gt;1 :set filetype=xhtml&lt;!-- raw HTML omitted --&gt;
nmap &lt;!-- raw HTML omitted --&gt;2 :set filetype=css&lt;!-- raw HTML omitted --&gt;
nmap &lt;!-- raw HTML omitted --&gt;3 :set filetype=javascript&lt;!-- raw HTML omitted --&gt;
nmap &lt;!-- raw HTML omitted --&gt;4 :set filetype=php&lt;!-- raw HTML omitted --&gt;
nmap &lt;!-- raw HTML omitted --&gt;5 :set filetype=default&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;nmap &lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;hl &lt;!-- raw HTML omitted --&gt;MarkSet
nmap &lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;hh &lt;!-- raw HTML omitted --&gt;MarkClear
nmap &lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;hr &lt;!-- raw HTML omitted --&gt;MarkRegex
vmap &lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;hl &lt;!-- raw HTML omitted --&gt;MarkSet
vmap &lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;hh &lt;!-- raw HTML omitted --&gt;MarkClear
vmap &lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;hr &lt;!-- raw HTML omitted --&gt;MarkRegex&lt;/p&gt;
&lt;p&gt;let g:miniBufExplMapWindowNavVim = 1&lt;br&gt;
let g:miniBufExplMapWindowNavArrows = 1&lt;br&gt;
let g:miniBufExplMapCTabSwitchBufs = 1&lt;br&gt;
let g:miniBufExplModSelTarget = 1&lt;br&gt;
let g:miniBufExplMoreThanOne=0&lt;/p&gt;
&lt;p&gt;set mouse=a&lt;/p&gt;
&lt;p&gt;set noswf&lt;/p&gt;
&lt;p&gt;let g:winManagerWindowLayout=&amp;ldquo;FileExplorer|TagList&amp;rdquo;&lt;/p&gt;
&lt;p&gt;let Tlist_File_Fold_Auto_Close=1&lt;/p&gt;
&lt;p&gt;&amp;ldquo;当文件在外部被修改，自动更新该文件
set autoread&lt;/p&gt;
&lt;p&gt;&amp;ldquo;设置历史记录步数
set history=400&lt;/p&gt;
&lt;p&gt;&amp;ldquo;快速退出（保存）为,&lt;!-- raw HTML omitted --&gt;
map &lt;!-- raw HTML omitted --&gt; :set mouse=v&lt;!-- raw HTML omitted --&gt;
map &lt;!-- raw HTML omitted --&gt; :set mouse=a&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;开启语法
syntax enable
syntax on&lt;/p&gt;
&lt;p&gt;&amp;ldquo;头文件与实现文件转换
map &lt;!-- raw HTML omitted --&gt; :A &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;设置字体&lt;/p&gt;
&lt;p&gt;&amp;ldquo;设置配色
colorscheme candycode&lt;/p&gt;
&lt;p&gt;set completeopt=menu&lt;/p&gt;
&lt;p&gt;set t_Co=256&lt;/p&gt;
&lt;p&gt;&amp;ldquo;高亮显示当前行
set cursorline
hi cursorline guibg=#222222
hi CursorColumn guibg=#333333&lt;/p&gt;
&lt;p&gt;&amp;ldquo;tag
set tags=tags;&lt;/p&gt;
&lt;p&gt;&amp;quot;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; =&amp;gt; 缩进
&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;ldquo;自动缩进
set ai&lt;/p&gt;
&lt;p&gt;&amp;ldquo;智能缩进
set si&lt;/p&gt;
&lt;p&gt;&amp;ldquo;设置缩进的空格数为4
set autoindent&lt;/p&gt;
&lt;p&gt;&amp;ldquo;设置自动缩进:即每行的缩进值与上一行相等；使用 noautoindent 取消设置
set shiftwidth=4
set tabstop=4
set softtabstop=4&lt;/p&gt;
&lt;p&gt;&amp;ldquo;设置使用 C/C++ 语言的自动缩进方式
set cin
set cindent&lt;/p&gt;
&lt;p&gt;&amp;ldquo;显示标尺
set ruler&lt;/p&gt;
&lt;p&gt;&amp;ldquo;设置命令行的高度
set cmdheight=1&lt;/p&gt;
&lt;p&gt;&amp;ldquo;显示行数
set number&lt;/p&gt;
&lt;p&gt;&amp;ldquo;显示匹配的括号([{和}])
set showmatch&lt;/p&gt;
&lt;p&gt;&amp;ldquo;高亮显示搜索的内容
set hlsearch&lt;/p&gt;
&lt;p&gt;&amp;ldquo;taglist
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1&lt;/p&gt;
&lt;p&gt;&amp;quot;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;
&amp;quot; =&amp;gt; 编码设置
&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Vim 内部使用的字符编码方式，包括 Vim 的 buffer (缓冲区)、菜单文本、
&amp;ldquo;消息文本等。用户手册上建议只在 .vimrc 中改变它的值，
&amp;ldquo;事实上似乎也只有在 .vimrc 中改变它的值才有意义。
set encoding=utf-8&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Vim 启动时会按照它所列出的字符编码方式逐一探测即将打开的文件的
&amp;ldquo;字符编码方式，并且将 fileencoding 设置为最终探测到的字符编码方式。
&amp;ldquo;因此最好将 Unicode 编码方式放到这个列表的最前面。
&amp;ldquo;set fileencodings=Unicode,utf-8,gb2312,gbk,gb18030,latin-1
&amp;ldquo;set fencs=utf-8,Unicode,gb2312,gbk,gb18030,latin-1,cp936
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936,latin-1,prc
&amp;ldquo;set fileencodings=ucs-bom,utf8,prc&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Vim 中当前编辑的文件的字符编码方式，
&amp;ldquo;Vim 保存文件时也会将文件保存为这种字符编码方式。
set fileencoding=utf-8
&amp;ldquo;set fileencoding=prc&lt;/p&gt;
&lt;p&gt;&amp;quot; termencoding: Vim 所工作的终端 (或者 Windows 的 Console 窗口)
&amp;quot; 的字符编码方式。这个选项对 GUI 模式的 gVim 无效，
&amp;quot; 而对 Console 模式的 Vim 而言就是Windows 控制台的代码页
&amp;quot; (对于 Windows 而言)，并且通常我们不需要改变它。
&amp;quot; 下面这句只影响普通模式 (非图形界面) 下的 Vim。
&amp;ldquo;set termencoding=prc
let &amp;amp;termencoding=&amp;amp;encoding&lt;/p&gt;
&lt;p&gt;&amp;quot; &amp;ldquo;代码折叠, 命令 za
set foldmethod=syntax
set foldlevel=100  &amp;ldquo;启动vim时不要自动折叠代码&lt;/p&gt;
&lt;p&gt;&amp;quot; &amp;ldquo;自动换行
if (has(&amp;ldquo;gui_running&amp;rdquo;)) &amp;ldquo;图形界面下的设置
&amp;quot; &amp;quot;
&amp;quot; &amp;ldquo;指定不折行。如果一行太长，超过屏幕宽度，则向右边延伸到屏幕外面
set nowrap
&amp;quot;
&amp;ldquo;添加水平滚动条。如果你指定了不折行，那为窗口添加一个水平滚动条就非常有必要
&amp;quot; 了
set guioptions+=b
&amp;quot;
else
&amp;ldquo;字符界面下的设置
set nowrap
endif&lt;/p&gt;
&lt;p&gt;&amp;quot; &amp;ldquo;&lt;!-- raw HTML omitted --&gt;code_complete.vim插件：函数自动完成
map &lt;!-- raw HTML omitted --&gt; :silent %!xmllint -format %&lt;!-- raw HTML omitted --&gt;
if !exists(&amp;ldquo;g:completekey&amp;rdquo;)
let g:completekey = &amp;ldquo;&lt;!-- raw HTML omitted --&gt;&amp;rdquo;   &amp;ldquo;hotkey
endif&lt;/p&gt;
&lt;p&gt;map &lt;!-- raw HTML omitted --&gt; gu
map &lt;!-- raw HTML omitted --&gt; gU&lt;/p&gt;
&lt;p&gt;map &lt;!-- raw HTML omitted --&gt; :cp &lt;!-- raw HTML omitted --&gt;
map &lt;!-- raw HTML omitted --&gt; :cn &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot; &amp;ldquo;当前目录生成tags语法文件，用于自动完成，函数提示：code_complete.vim
&amp;ldquo;OmniCppComplete.vim &amp;hellip;
&amp;ldquo;map &lt;!-- raw HTML omitted --&gt; :call SET_CSAD() &lt;!-- raw HTML omitted --&gt;
&amp;quot;
&amp;quot; &amp;ldquo;函数和变量列表
map &lt;!-- raw HTML omitted --&gt; :TlistToggle&lt;!-- raw HTML omitted --&gt;
&amp;quot;
&amp;quot; &amp;ldquo;文件浏览器
&amp;ldquo;map &lt;!-- raw HTML omitted --&gt; :WMToggle&lt;!-- raw HTML omitted --&gt;
&amp;quot;
&amp;quot; &amp;ldquo;文件树状列表
nmap &lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt; :execute &amp;lsquo;NERDTreeToggle &amp;lsquo;. expand(&amp;rdquo;%:p:h&amp;rdquo;)&lt;!-- raw HTML omitted --&gt;
&amp;quot;
&amp;quot; &amp;ldquo;映射复制、粘贴、剪贴ctrl+c ctrl+v ctrl+x
&amp;quot; map &lt;!-- raw HTML omitted --&gt; &amp;ldquo;+pa&lt;!-- raw HTML omitted --&gt;
&amp;quot; map! &lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;&amp;quot;+pa
map &lt;!-- raw HTML omitted --&gt; &amp;ldquo;+y
map &lt;!-- raw HTML omitted --&gt; &amp;ldquo;+x
&amp;quot;
&amp;quot; &amp;quot; 映射全选 ctrl+a
map &lt;!-- raw HTML omitted --&gt; ggVG
map! &lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;ggVG
&amp;quot;
&amp;quot; &amp;quot; 多行缩进
map &lt;!-- raw HTML omitted --&gt; &amp;gt;
map &lt;!-- raw HTML omitted --&gt; &amp;lt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;设置自动补齐
&amp;ldquo;filetype plugin indent on
&amp;ldquo;set completeopt=longest,menu&lt;/p&gt;
&lt;p&gt;&amp;ldquo;if has(&amp;ldquo;autocmd&amp;rdquo;) &amp;amp;&amp;amp; exists(&amp;quot;+omnifunc&amp;rdquo;)
&amp;quot;     autocmd Filetype *
&amp;quot;   \ if &amp;amp;omnifunc == &amp;quot;&amp;rdquo; |
&amp;quot;   \   setlocal omnifunc=syntaxcomplete#Complete |
&amp;quot;   \ endif
&amp;ldquo;endif&lt;/p&gt;
&lt;p&gt;&amp;ldquo;let g:SuperTabDefaultCompletionType=&amp;quot;&lt;!-- raw HTML omitted --&gt;&amp;lt;C-]&amp;gt;&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;let g:SuperTabRetainCompletionType=0
&amp;quot; 0 - 不记录上次的补全方式
&amp;quot; 1 - 记住上次的补全方式,直到用其他的补全命令改变它
&amp;quot; 2 - 记住上次的补全方式,直到按ESC退出插入模式为止&lt;/p&gt;
&lt;p&gt;map &lt;!-- raw HTML omitted --&gt; :call TitleDet()&amp;rsquo;s &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;map &lt;!-- raw HTML omitted --&gt; :call SET_CSAD()&amp;rsquo;s &lt;!-- raw HTML omitted --&gt;
map &lt;!-- raw HTML omitted --&gt; :call SET_CSPHP()&amp;rsquo;s &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;function AddTitle()
call append(0,&amp;rdquo;/*******************************************************************************&amp;rdquo;)
&amp;ldquo;call append(1,&amp;rdquo;#&amp;rdquo;)
call append(1,&amp;rdquo; * Author : RKhuwq&amp;rdquo;)
&amp;ldquo;call append(3,&amp;rdquo;#&amp;rdquo;)
call append(2,&amp;rdquo; * Email : &lt;a class=&#34;link&#34; href=&#34;mailto:huwq@neusoft.com&#34; &gt;huwq@neusoft.com&lt;/a&gt;&amp;rdquo;)
&amp;ldquo;call append(5,&amp;rdquo;#&amp;rdquo;)
call append(3,&amp;rdquo; * Last modified : &amp;ldquo;.strftime(&amp;quot;%Y-%m-%d %H:%M&amp;rdquo;))
&amp;ldquo;call append(7,&amp;rdquo;#&amp;rdquo;)
call append(4,&amp;rdquo; * Filename : &amp;ldquo;.expand(&amp;rdquo;%&amp;rdquo;))
&amp;ldquo;call append(9,&amp;rdquo;#&amp;rdquo;)
call append(5,&amp;rdquo; * Description : &amp;ldquo;)
&amp;ldquo;call append(11,&amp;rdquo;#&amp;rdquo;)
call append(6,&amp;rdquo; * *****************************************************************************/&amp;rdquo;)
echohl WarningMsg | echo &amp;ldquo;Successful in adding the copyright.&amp;rdquo; | echohl None
endfunction&lt;/p&gt;
&lt;p&gt;&amp;ldquo;更新最近修改时间和文件名
function UpdateTitle()
normal m&amp;rsquo;
execute &amp;rsquo; * Last modified : /s@:.&lt;em&gt;$@=strftime(&amp;rdquo;:\t%Y-%m-%d %H:%M&amp;rdquo;)@&amp;rsquo;
normal &amp;quot;
normal mk
execute &amp;rsquo; * Filename : /s@:.&lt;/em&gt;$@=&amp;rdquo;:\t\t&amp;rdquo;.expand(&amp;rdquo;%:t&amp;rdquo;)@&amp;rsquo;
execute &amp;ldquo;noh&amp;rdquo;
normal &amp;lsquo;k
echohl WarningMsg | echo &amp;ldquo;Successful in updating the copy right.&amp;quot;| echohl None
endfunction&lt;/p&gt;
&lt;p&gt;autocmd BufEnter :/ * Last modified : /s@:.*$@=strftime(&amp;rdquo; : %Y-%m-%d %H:%M&amp;rdquo;)@&lt;/p&gt;
&lt;p&gt;&amp;ldquo;判断第四行行代码里面，是否有Last modified这个单词，
&amp;ldquo;如果没有的话，代表没有添加过作者信息，需要新添加；
&amp;ldquo;如果有的话，那么只需要更新即可
function TitleDet()
let line = getline(4)
if line =~ &amp;lsquo;\s*\sLast\smodified\s:\s\S*&amp;rsquo;
:/ * Last modified : /s@:.*$@=strftime(&amp;rdquo;: %Y-%m-%d %H:%M&amp;rdquo;)@
return
endif
call AddTitle()
endfunction&lt;/p&gt;
&lt;p&gt;&amp;ldquo;自动补全
set completeopt=menu,menuone
let OmniCpp_MayCompleteDot = 1 &amp;quot; autocomplete with .
let OmniCpp_MayCompleteArrow = 1 &amp;quot; autocomplete with -&amp;gt;
let OmniCpp_MayCompleteScope = 1 &amp;quot; autocomplete with ::
let OmniCpp_SelectFirstItem = 2 &amp;quot; select first item (but don&amp;rsquo;t insert)
let OmniCpp_NamespaceSearch = 2 &amp;quot; search namespaces in this and included files
let OmniCpp_ShowPrototypeInAbbr = 1 &amp;quot; show function prototype  in popup window
let OmniCpp_GlobalScopeSearch=1
let OmniCpp_DisplayMode=1
let OmniCpp_DefaultNamespaces=[&amp;ldquo;std&amp;rdquo;]&lt;/p&gt;
&lt;p&gt;&amp;quot; ~/.vimrc (configuration file for vim only)
&amp;quot; skeletons
&amp;ldquo;autocmd BufNewFile	*.spec	call SKEL_spec()
&amp;quot; filetypes
filetype plugin on
filetype indent on
&amp;quot; ~/.vimrc ends here
{% endcodeblock %}
其中F2为xml排版，F3为cscope搜索上一条，F4下一条，F6当前文件函数列表，F7目录列表，F8启用鼠标，F9不使用鼠标，F12 C语言中头文件与代码文件转换&lt;/p&gt;
&lt;p&gt;Ctrl+E注释，Ctrl+F5生成C语言ctags与cscope，Ctrl+F6生成php语言ctags与cscope&lt;/p&gt;
&lt;p&gt;之后下载本文的配置。复制到$HOME目录的.vim目录中。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://sohunjug.com/files/vim.zip&#34; &gt;下载地址&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>Vim的xml排版</title>
        <link>https://sohunjug.com/2012/12/21/vim%E7%9A%84xml%E6%8E%92%E7%89%88/</link>
        <pubDate>Fri, 21 Dec 2012 00:00:00 +0800</pubDate>
        
        <guid>https://sohunjug.com/2012/12/21/vim%E7%9A%84xml%E6%8E%92%E7%89%88/</guid>
        <description>&lt;p&gt;如果你手中有一个xml，而这个xml显示的排版非常混乱，大家看的时候可能会很为难，其实vim也可以实现xml的排版。&lt;/p&gt;
&lt;p&gt;比如你的xml是这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sohunjug.com/img/blog/xml-11.jpeg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;未排版的xml&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;需要安装一个程序。&lt;/p&gt;
&lt;p&gt;如果使用的是fedora，输入
{% codeblock lang:bash %}
yum install xml2
{% endcodeblock %}
如果是其他系统可能会叫xmllint&lt;/p&gt;
&lt;p&gt;之后可以在终端中用命令排版，
{% codeblock lang:bash %}
xmllint -format -recover 后边加上文件名
{% endcodeblock %}
如果vim中使用，则需要修改~/.vimrc，添加如下：
{% codeblock lang:vim %}
map &lt;!-- raw HTML omitted --&gt; :silent %!xmllint -format &lt;!-- raw HTML omitted --&gt;
{% endcodeblock %}
&lt;img src=&#34;https://sohunjug.com/img/blog/xml-2.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;排版后的xml&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;效果还不错吧～    以后就可以使用F2直接排版xml了～&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;</description>
        </item>
        <item>
        <title>末日杂记</title>
        <link>https://sohunjug.com/2012/12/21/%E6%9C%AB%E6%97%A5%E6%9D%82%E8%AE%B0/</link>
        <pubDate>Fri, 21 Dec 2012 00:00:00 +0800</pubDate>
        
        <guid>https://sohunjug.com/2012/12/21/%E6%9C%AB%E6%97%A5%E6%9D%82%E8%AE%B0/</guid>
        <description>&lt;p&gt;眨眼间半年就过去了，毕业后的日子终究没有上学时候自由，可是大家都希望毕业，有点纠结呀。&lt;/p&gt;
&lt;p&gt;工作的生活有点千篇一律，天天都是代码，bug，需求。不过初次步入社会，与学校中的生活还真是区别甚大。天天的生活仿佛回到了小学，每天盼着下班，周末，放假。&lt;/p&gt;
&lt;p&gt;不过公司到确实给了我一个学习的环境，从Tuxedo后台服务端，到webservice后台客户端，学习了好多，大公司的项目确实很锻炼人。
我也从一个linux菜鸟，过滤到了新手的地步哈。大学之后用用ubuntu，看看apt-get 没事还得用用新得力，给人一种神秘感。即使刚进公司时，我也没想到会用linux替换windows系统。&lt;/p&gt;
&lt;p&gt;刚开始看各种论坛说opensuse还不错，就用了2月，gnome桌面还算挺舒服，一些额外的插件基本能满足大部分人的使用。可惜本身带了好多的程序，感觉太累赘了。后来开始研究gentoo，发现了一块新大陆，编译内核确实有点难，不过主要是wpa2，虽然安装上了wpa2-support，可是就是不好用，之后又尝试了arch-linux，安装都可以，唯一缺点是内核问题，不知道为什么总是关机显示kvm：exiting hardware virtualization就卡了，找了好久也没弄明白什么问题。因为后来看了一些博客说国外的程序员很多都用fedora和ubuntu，之后也就尝试了一下kde的fedora，尝试发现kde用着确实很爽，界面美观，发现内存使用也不是很高，我的8G内存本本现在还算勉强够用吧，估计等闲余时间多了之后，我还会折腾折腾arch或者gentoo吧。哈哈～&lt;/p&gt;
&lt;p&gt;现在已经彻底使用linux代替了windows系统，wine qq 基本也就够用了，其他各种工具也都有，不过最喜欢的就是写shell脚本，确实好方便呀。我会陆续发表分享的。&lt;/p&gt;
&lt;p&gt;其实一直都想开博客，可惜总是有些事情给耽误了。不过既然末日都因故推迟了，我推迟推迟也是应该的哈～
我会好好做下去，有些技术也可以分享分享哈。&lt;/p&gt;</description>
        </item>
        <item>
        <title>让wordpress支持自定义菜单</title>
        <link>https://sohunjug.com/2012/12/19/%E8%AE%A9wordpress%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89%E8%8F%9C%E5%8D%95/</link>
        <pubDate>Wed, 19 Dec 2012 00:00:00 +0800</pubDate>
        
        <guid>https://sohunjug.com/2012/12/19/%E8%AE%A9wordpress%E6%94%AF%E6%8C%81%E8%87%AA%E5%AE%9A%E4%B9%89%E8%8F%9C%E5%8D%95/</guid>
        <description>&lt;p&gt;&lt;strong&gt;WORDPRESS博客有些主题不支持自定义菜单，只能够选择页面和所有的分页目录作为菜单，所以为了解决这一问题，找了一些资料&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在这个之前首先对wordpress的wp_nav_menu() 函数应该了解：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用方法如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% codeblock lang:php %}
wp_nav_menu( &lt;br&gt;
array( &lt;br&gt;
&amp;rsquo;theme_location&amp;rsquo;  =&amp;gt; &amp;rsquo;&amp;rsquo; //指定显示的导航名，如果没有设置，则显示第一个 &lt;br&gt;
&amp;lsquo;menu&amp;rsquo;            =&amp;gt; &amp;lsquo;header-menu&amp;rsquo;, &lt;br&gt;
&amp;lsquo;container&amp;rsquo;       =&amp;gt; &amp;rsquo;nav&amp;rsquo;, //最外层容器标签名  &lt;br&gt;
&amp;lsquo;container_class&amp;rsquo; =&amp;gt; &amp;lsquo;primary&amp;rsquo;, //最外层容器class名  &lt;br&gt;
&amp;lsquo;container_id&amp;rsquo;    =&amp;gt; &amp;lsquo;&amp;rsquo;,//最外层容器id值  &lt;br&gt;
&amp;lsquo;menu_class&amp;rsquo;      =&amp;gt; &amp;lsquo;sf-menu&amp;rsquo;, //ul标签class &lt;br&gt;
&amp;lsquo;menu_id&amp;rsquo;         =&amp;gt; &amp;rsquo;topnav&amp;rsquo;,//ul标签id  &lt;br&gt;
&amp;rsquo;echo&amp;rsquo;            =&amp;gt; true,//是否打印，默认是true，如果想将导航的代码作为赋值使用，可设置为false &lt;br&gt;
&amp;lsquo;fallback_cb&amp;rsquo;     =&amp;gt; &amp;lsquo;wp_page_menu&amp;rsquo;,//备用的导航菜单函数，用于没有在后台设置导航时调用 &lt;br&gt;
&amp;lsquo;before&amp;rsquo;          =&amp;gt; &amp;lsquo;&amp;rsquo;,//显示在导航a标签之前 &lt;br&gt;
&amp;lsquo;after&amp;rsquo;           =&amp;gt; &amp;lsquo;&amp;rsquo;,//显示在导航a标签之后 &lt;br&gt;
&amp;rsquo;link_before&amp;rsquo;     =&amp;gt; &amp;lsquo;&amp;rsquo;,//显示在导航链接名之后 &lt;br&gt;
&amp;rsquo;link_after&amp;rsquo;      =&amp;gt; &amp;lsquo;&amp;rsquo;,//显示在导航链接名之前 &lt;br&gt;
&amp;lsquo;items_wrap&amp;rsquo;      =&amp;gt;&lt;br&gt;
&amp;lsquo;depth&amp;rsquo;           =&amp;gt; 0,////显示的菜单层数，默认0，0是显示所有层&lt;br&gt;
&amp;lsquo;walker&amp;rsquo;          =&amp;gt; &amp;lsquo;&amp;rsquo;// //调用一个对象定义显示导航菜单 ));&lt;br&gt;
{% endcodeblock %}&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;为了能够使后台支持自定义菜单，我们需要在主题下functions.php下 加入register_nav_menus():&lt;/p&gt;
&lt;p&gt;{% codeblock lang:php %}
if(function_exists(&amp;lsquo;register_nav_menus&amp;rsquo;)){
register_nav_menus(
array(
&amp;lsquo;header-menu&amp;rsquo; =&amp;gt; &lt;strong&gt;( &amp;lsquo;导航自定义菜单&amp;rsquo; ),
// 还可以在这里添加一些菜单 显示在其他位置
//footer-menu=&amp;gt;&lt;/strong&gt;( &amp;lsquo;页面底部自定义菜单&amp;rsquo; ),
)
);
}
{% endcodeblock %}&lt;/p&gt;
&lt;p&gt;在添加之后，你就会发现主题位置已经支持一个菜单了&lt;/p&gt;
&lt;p&gt;然后找到header.php文件, 类似这样添加：&lt;/p&gt;
&lt;p&gt;{% codeblock lang:php %}&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;{% endcodeblock %}&lt;/p&gt;
&lt;p&gt;好了, 大家可以自己制作属于自己的自定义菜单了~&lt;/p&gt;</description>
        </item>
        <item>
        <title>关于</title>
        <link>https://sohunjug.com/%E5%85%B3%E4%BA%8E/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://sohunjug.com/%E5%85%B3%E4%BA%8E/</guid>
        <description>&lt;p&gt;This is a test page for i18n support.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>链接</title>
        <link>https://sohunjug.com/%E9%93%BE%E6%8E%A5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://sohunjug.com/%E9%93%BE%E6%8E%A5/</guid>
        <description>&lt;p&gt;To use this feature, add &lt;code&gt;links&lt;/code&gt; section to frontmatter.&lt;/p&gt;
&lt;p&gt;This page&amp;rsquo;s frontmatter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GitHub is the world&amp;#39;s largest software development platform.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;website&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://github.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TypeScript&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;website&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://www.typescriptlang.org&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ts-logo-128.jpg&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;image&lt;/code&gt; field accepts both local and external images.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>搜索</title>
        <link>https://sohunjug.com/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://sohunjug.com/search/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>
